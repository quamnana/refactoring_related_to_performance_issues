_id,commit_id,repo_name,type,issue_title,issue_url,repo_url,commit_url,filePath,category,use,reasons
665189cd4eb27c185fe55b7b,7b9efc2ee537d4417c9a59493ec79b3a66169cf1,Payara,Add Method Annotation,Upgrade to Hazelcast 3.5 for JCache fix,https://github.com/payara/Payara/issues/339,https://github.com/payara/Payara,https://github.com/payara/Payara/commit/7b9efc2ee537d4417c9a59493ec79b3a66169cf1,appserver/payara-appserver-modules/payara-jsr107/src/main/java/fish/payara/cdi/jsr107/CachePutInterceptor.java/69-69,Caching Optimization,Fix-related,"This refactoring is directly aimed at improving the caching system's performance and efficiency. By upgrading Hazelcast and removing the need for a custom value holder, the changes likely result in more efficient caching operations, potentially leading to better overall application performance."
667715563cbfb03cd0957472,9c1b6ad8e5587391bb090cf33f3b3e8cdd55b878,vertx-ignite,Change Attribute Type,Ignite cache cannot expire,https://github.com/vert-x3/vertx-ignite/issues/95,https://github.com/vert-x3/vertx-ignite,https://github.com/vert-x3/vertx-ignite/commit/9c1b6ad8e5587391bb090cf33f3b3e8cdd55b878,src/main/java/io/vertx/spi/cluster/ignite/IgniteCacheOptions.java/55-55,Caching Optimization,Fix-related,"Adding the expiryPolicy attribute improves the caching system's functionality by allowing cache entries to expire based on the specified policy. This refactoring is fix-related, as it addresses a specific issue with cache expiration, enhancing the system's reliability and stability."
664e3d1b7b998c13cdb9ecbc,3a1260954b51e976834306c1b4163c527c88f877,quarkus,Change Return Type,Integrate Redis with the Quarkus Cache,https://github.com/quarkusio/quarkus/issues/27785,https://github.com/quarkusio/quarkus,https://github.com/quarkusio/quarkus/commit/3a1260954b51e976834306c1b4163c527c88f877,extensions/cache/runtime/src/main/java/io/quarkus/cache/runtime/CacheManagerRecorder.java/49-49,Caching Optimization,Fix-related,"The code provided implements a mechanism to resolve and select appropriate cache managers, which is central to caching optimization."
664e3d1f7b998c13cdb9ecd0,1e19dada64ee3dde665473ac8a4b33a9e1f8efb8,quarkus,Add Method Annotation,Integrate Redis with the Quarkus Cache,https://github.com/quarkusio/quarkus/issues/27785,https://github.com/quarkusio/quarkus,https://github.com/quarkusio/quarkus/commit/1e19dada64ee3dde665473ac8a4b33a9e1f8efb8,extensions/redis-cache/runtime/src/main/java/io/quarkus/cache/redis/runtime/RedisCacheImpl.java/329-329,Caching Optimization,Maintenance-related,"Adding the static keyword to the method and removing lambdas in favor of anonymous classes can improve the execution time by reducing the overhead associated with lambda creation and execution. The use of @Override also enhances readability and maintenance, ensuring that the method correctly overrides an inherited method."
664f70527b998c13cdbb7cad,176a3d215cd8adb855fb371e03e7d9aeee5118e2,querydsl,Change Attribute Type,querydsl-sql : Joda time should be optional,https://github.com/querydsl/querydsl/issues/2025,https://github.com/querydsl/querydsl,https://github.com/querydsl/querydsl/commit/176a3d215cd8adb855fb371e03e7d9aeee5118e2,querydsl-sql/src/main/java/com/querydsl/sql/types/AbstractDateTimeType.java/47-52,Concurrency and Parallelism Enhancement,Fix-related,"Changing the attribute type to ThreadLocal<SimpleDateFormat> ensures that each thread has its own instance of SimpleDateFormat, avoiding the overhead and potential concurrency issues associated with shared DateFormat instances."
6652f4db5484ec0c9ccd9f23,6e2155473d500d2d73f40741791466b729e0a7f0,rdf4j,Change Attribute Type,SHACL - Support shapes in any graph,https://github.com/eclipse-rdf4j/rdf4j/issues/3657,https://github.com/eclipse-rdf4j/rdf4j,https://github.com/eclipse-rdf4j/rdf4j/commit/6e2155473d500d2d73f40741791466b729e0a7f0,core/sail/api/src/main/java/org/eclipse/rdf4j/common/concurrent/locks/diagnostics/LockTracking.java/241-241,Concurrency and Parallelism Enhancement,Fix-related,"Changing the attribute type from a specific Lock to a generic T allows for more flexible and potentially more efficient lock implementations, such as StampedLock. This refactoring supports improved concurrency control and parallel processing, which are crucial for performance optimization in multi-threaded environments."
66516ff34eb27c185fe53378,38c01957810aac179407092c9bf7a360e15d459b,qupath,Change Variable Type,Generating multiple readers with Bio-Formats can be very slow,https://github.com/qupath/qupath/issues/865,https://github.com/qupath/qupath,https://github.com/qupath/qupath/commit/38c01957810aac179407092c9bf7a360e15d459b,qupath-extension-bioformats/src/main/java/qupath/lib/images/servers/bioformats/BioFormatsImageServer.java/837-837,Concurrency and Parallelism Enhancement,Fix-related,"Changing the variable type to use a reader pool (readerPool) instead of directly getting a single reader (IFormatReader ipReader) optimizes the performance of the tile reading process. This refactoring allows for better management of resources, reduces bottlenecks, and avoids generating more readers than needed."
6651367c4eb27c185fe4c36a,9a0fafe579378b0b76d416e3fd85e9645653aba1,eventmesh,Rename Variable,[Enhancement] Refactor SubScribeTask,https://github.com/apache/eventmesh/issues/3445,https://github.com/apache/eventmesh,https://github.com/apache/eventmesh/commit/9a0fafe579378b0b76d416e3fd85e9645653aba1,eventmesh-storage/eventmesh-storage-standalone/src/main/java/org/apache/eventmesh/storage/standalone/consumer/StandaloneConsumer.java/117-117,Concurrency and Parallelism Enhancement,Maintenance-related,"Renaming variables is a maintenance-related refactoring. It enhances the readability and clarity of the code by using clear and descriptive names, making the codebase easier to understand and manage. "
6651b0294eb27c185fe57770,2f35cddd1f8159a375c9c307e7648aaa87f81da7,product-apim,Move Class,APIM become slow/unresponsive and all synapse threads wait on PassThroughMessageProcessor-[IdentityEncoder],https://github.com/wso2/product-apim/issues/4682,https://github.com/wso2/product-apim,https://github.com/wso2/product-apim/commit/2f35cddd1f8159a375c9c307e7648aaa87f81da7,modules/integration/tests-common/admin-clients/src/main/java/org/wso2/am/admin/clients/common/AuthenticatorClient.java/32-85,Concurrency and Parallelism Enhancement,Maintenance-related,"Moving classes to their correct packages can help avoid issues like class loading conflicts, reduce the size of individual packages, and improve the clarity of the code structure. This can result in more efficient handling of concurrent operations, particularly in systems like APIM (API Management) where multiple threads and processes are involved."
664f3eef7b998c13cdbb33b5,2aec1f61ec4298ebc9c355af2ddcf86e55d7f8ba,JSqlParser,Rename Variable,[BUG] JSQLParser 4.6 : PostgreSQL : CPU burn when parsing certain queries,https://github.com/JSQLParser/JSqlParser/issues/1792,https://github.com/JSQLParser/JSqlParser,https://github.com/JSQLParser/JSqlParser/commit/2aec1f61ec4298ebc9c355af2ddcf86e55d7f8ba,src/test/java/net/sf/jsqlparser/test/TestUtils.java/159-159,CPU Usage Optimization,Test-related,Renaming variables to improve code readability can indirectly support performance optimization efforts by making the code easier to understand and maintain.
6652e52e5484ec0c9ccd91d8,9354ff1a4550442f71aa4a59d17484d3b9916ac3,Ice_and_Fire,Add Method Annotation,Severe performance issues with Citadel and Ice & Fire [iceandfire-2.1.9-1.16.5],https://github.com/AlexModGuy/Ice_and_Fire/issues/4393,https://github.com/AlexModGuy/Ice_and_Fire,https://github.com/AlexModGuy/Ice_and_Fire/commit/9354ff1a4550442f71aa4a59d17484d3b9916ac3,src/main/java/com/github/alexthe666/iceandfire/entity/EntityChainTie.java/120-120,Execution Time Improvement,Maintenance-related,"Adding the @Override annotation to the remove method ensures that it correctly overrides a superclass method. This refactoring, combined with the replacement of deprecated properties, indicates an effort to align with more efficient and updated practices."
6651a6904eb27c185fe56c18,ea6dc9174f3d021697f63d320953a80aae0164ac,IPED,Add Parameter,Maps with lot of items not being plotted,https://github.com/sepinf-inc/IPED/issues/1427,https://github.com/sepinf-inc/IPED,https://github.com/sepinf-inc/IPED/commit/ea6dc9174f3d021697f63d320953a80aae0164ac,iped-geo/src/main/java/iped/geo/AbstractMapCanvas.java/139-139,Execution Time Improvement,Fix-related,This refactoring is clearly aimed at improving execution time by leveraging a more efficient map implementation and enhancing the method to handle more detailed information for each placemark.
664f72d77b998c13cdbb852e,0ee548b4a80e5d5a638db04b13b369f4cad01b27,rstudio,Add Parameter,rstudio_command_palette_search is slow,https://github.com/rstudio/rstudio/issues/6961,https://github.com/rstudio/rstudio,https://github.com/rstudio/rstudio/commit/0ee548b4a80e5d5a638db04b13b369f4cad01b27,src/gwt/src/org/rstudio/studio/client/palette/ui/RAddinCommandPaletteEntry.java/28-28,Execution Time Improvement,Fix-related,"Adding the String label parameter to the RAddinCommandPaletteEntry constructor allows for the pre-computation and passing of the label, rather than computing it during the search process."
664f70557b998c13cdbb7cb2,846738eaa40f27ea7919c7d340e2ddde26ece73e,querydsl,Change Attribute Type,querydsl-sql : Joda time should be optional,https://github.com/querydsl/querydsl/issues/2025,https://github.com/querydsl/querydsl,https://github.com/querydsl/querydsl/commit/846738eaa40f27ea7919c7d340e2ddde26ece73e,querydsl-sql/src/main/java/com/querydsl/sql/SQLiteTemplates.java/38-38,Execution Time Improvement,Fix-related,"Changing the attribute type to DateTimeFormatter improves performance by eliminating the need for thread-local storage and leveraging the more efficient, thread-safe DateTimeFormatter."
664d2b0bc6ae44388495f0f1,947fed4865feb680cb455d51f882a9bd913d5566,skywalking,Change Parameter Type,Topology ui Service SLA show error,https://github.com/apache/skywalking/issues/4273,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/947fed4865feb680cb455d51f882a9bd913d5566,apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/TraceSegment.java/134-134,Execution Time Improvement,Fix-related,"This refactoring directly impacts performance by potentially optimizing the way spans are archived and processed. Using a more specific type can enhance the efficiency of the method, leading to improvements in execution time."
664f72cc7b998c13cdbb84c5,e744c52b2beebc74090302d8a37a1561c1a13323,rstudio,Change Parameter Type,rstudio_command_palette_search is slow,https://github.com/rstudio/rstudio/issues/6961,https://github.com/rstudio/rstudio,https://github.com/rstudio/rstudio/commit/e744c52b2beebc74090302d8a37a1561c1a13323,src/gwt/src/org/rstudio/studio/client/palette/ui/CommandPalette.java/136-136,Execution Time Improvement,Fix-related,"this change is primarily Fix-related, specifically aimed at Execution Time Improvement. It's part of an ongoing effort to optimize the command palette search functionality. While the full impact of the changes isn't visible in this small snippet, the approach of delegating rendering to individual items has the potential to significantly improve the performance of the command palette search, addressing the reported issue of slowness."
665125934eb27c185fe4ab2f,a5b35f5b47e24d22aa9daf1989d02f2ff616c41a,uaa,Change Parameter Type,Performance of /oauth/token endpoint,https://github.com/cloudfoundry/uaa/issues/936,https://github.com/cloudfoundry/uaa,https://github.com/cloudfoundry/uaa/commit/a5b35f5b47e24d22aa9daf1989d02f2ff616c41a,server/src/main/java/org/cloudfoundry/identity/uaa/oauth/openid/IdTokenGranter.java/38-38,Execution Time Improvement,Fix-related,"Changing the parameter type from String userId to UaaUser user allows the method to have direct access to the user object, reducing the need for additional lookups or data retrievals.The commit message focuses on improving the performance of the /oauth/token endpoint. By refactoring the idtoken creator and passing a user object instead of just the user ID, the process can be optimized for better performance."
66515c204eb27c185fe5140a,62157698148a526a92051cf22e55b351c87e4fff,xDrip,Change Return Type,Improvement: define Tresiba in Insulin Profiles,https://github.com/NightscoutFoundation/xDrip/issues/1153,https://github.com/NightscoutFoundation/xDrip,https://github.com/NightscoutFoundation/xDrip/commit/62157698148a526a92051cf22e55b351c87e4fff,app/src/main/java/com/eveningoutpost/dexdrip/Models/Treatments.java/770-770,Execution Time Improvement,Fix-related,"Changing the return type and method name suggests a rework of the insulin calculation logic. The new method calculateLegacyIobActivityFromTreatmentAtTime may offer a more efficient or accurate way to calculate insulin on board (IOB) activity from treatments over time. This rework likely aims at improving the execution time of the calculation, which is crucial in medical applications for timely and accurate insulin dosing."
6652a3174eb27c185fe6bd70,f67f2b650de8a7722b6b176f93da8f5b3ebcc0d4,OpenKeeper,Change Return Type,Converting video cutscenes,https://github.com/tonihele/OpenKeeper/issues/31,https://github.com/tonihele/OpenKeeper,https://github.com/tonihele/OpenKeeper/commit/f67f2b650de8a7722b6b176f93da8f5b3ebcc0d4,src/toniarts/openkeeper/video/tgq/TgqFrame.java/287-287,Execution Time Improvement,Fix-related,"This optimization likely improves the execution time by handling multiple bits at once or by processing the bit stream more efficiently. This refactoring directly impacts performance by optimizing the decoding logic, which is crucial in bit manipulation tasks. It ensures that the method can handle bit streams more effectively, potentially reducing the time required for decoding operations."
664d2b16c6ae44388495f10e,48b2164f33f8dbf80acb44255a5800215661f520,skywalking,Change Return Type,Topology ui Service SLA show error,https://github.com/apache/skywalking/issues/4273,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/48b2164f33f8dbf80acb44255a5800215661f520,apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/trace/EntrySpan.java/42-42,Execution Time Improvement,Fix-related,The change in the return type from void to boolean in the finish method and the addition of a conditional return value helps in immediately determining the state of the trace segment. This can potentially improve execution time by avoiding unnecessary operations or checks after the method call.
667715783cbfb03cd09574cc,d488bb127458e4c3f7ca30b1319691ea721a5db5,preesm,Change Return Type,[model] Broadcast/Fork to Fork optimization after flattening is erroneous,https://github.com/preesm/preesm/issues/339,https://github.com/preesm/preesm,https://github.com/preesm/preesm/commit/d488bb127458e4c3f7ca30b1319691ea721a5db5,plugins/org.preesm.algorithm/src/org/preesm/algorithm/schedule/fpga/AsapFpgaIIevaluator.java/122-122,Execution Time Improvement,Fix-related,"the code is optimized for faster data retrieval, which is crucial in the context of FPGA cycle analysis. This change is likely to result in noticeable performance improvements, especially as the scale of the analysis increases."
66515c484eb27c185fe51463,1928c236702e925c16dbee291a504c5bfc19b002,xDrip,Change Return Type,Smart alert doesn't work,https://github.com/NightscoutFoundation/xDrip/issues/1786,https://github.com/NightscoutFoundation/xDrip,https://github.com/NightscoutFoundation/xDrip/commit/1928c236702e925c16dbee291a504c5bfc19b002,app/src/main/java/com/eveningoutpost/dexdrip/ui/classifier/NoteClassifier.java/66-66,Execution Time Improvement,Fix-related,"Changing the return type from PointValue to HPointValue in the red method suggests an optimization for handling high-frequency reading. The new return type likely supports more efficient processing or storage of point values, which can improve execution time when dealing with high-frequency data."
6652beb75484ec0c9ccd768f,fd9f321ab6f9ebab1cf43337431cd749a84a64f4,lisa,Change Variable Type,[FEATURE REQUEST] Refactor project structure,https://github.com/lisa-analyzer/lisa/issues/205,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/fd9f321ab6f9ebab1cf43337431cd749a84a64f4,lisa/lisa-analyses/src/main/java/it/unive/lisa/analysis/string/fsa/Automaton.java/745-745,Execution Time Improvement,Fix-related,"Changing from unsorted sets to sorted sets (TreeSet) can improve the performance of certain operations, especially when order matters or when you need to perform operations like finding the first or last element."
6651a1524eb27c185fe5676c,2c9165afb08126189ee3367347e7011f89227b7c,DSpace,Change Variable Type,Performance Issues with Groups having many EPerson members,https://github.com/DSpace/DSpace/issues/9052,https://github.com/DSpace/DSpace,https://github.com/DSpace/DSpace/commit/2c9165afb08126189ee3367347e7011f89227b7c,dspace-api/src/main/java/org/dspace/eperson/GroupServiceImpl.java/183-183,Execution Time Improvement,Fix-related,"This refactoring directly impacts performance by avoiding the overhead associated with handling large lists. By counting members instead of retrieving and processing each one, the system can achieve better performance and resource utilization."
6652f59b5484ec0c9ccda185,c24319ea28b57161dd5784551e316b8bd25aad44,rdf4j,Change Variable Type,Support for merge join and ordered indexes,https://github.com/eclipse-rdf4j/rdf4j/issues/4819,https://github.com/eclipse-rdf4j/rdf4j,https://github.com/eclipse-rdf4j/rdf4j/commit/c24319ea28b57161dd5784551e316b8bd25aad44,core/sail/extensible-store/src/test/java/org/eclipse/rdf4j/sail/extensiblestore/ordered/OrderedTest.java/75-76,Execution Time Improvement,Test-related,"This refactoring showcases how performance optimizations often go hand-in-hand with feature enhancements in database and query systems. The introduction of ordered operations support is a common technique for improving join performance, especially in systems dealing with large volumes of data."
665153434eb27c185fe50817,b75b1e6891f8c5f10e6e7e8350199e64880ffd63,clickhouse-java,Extract Method,Preform performance and stability test on different client implementation ,https://github.com/ClickHouse/clickhouse-java/issues/1421,https://github.com/ClickHouse/clickhouse-java,https://github.com/ClickHouse/clickhouse-java/commit/b75b1e6891f8c5f10e6e7e8350199e64880ffd63,src/main/java/ru/yandex/clickhouse/util/ClickHouseArrayUtil.java/18-31,Execution Time Improvement,Fix-related,"The modification to the arrayToString method, particularly the addition of an explicitEscape parameter, indicates an attempt to optimize string conversion, which can have a significant impact on execution time."
6653038f5484ec0c9ccdb84b,ffc54ec20a2b4baf3f947d155ffaed13c6a606cf,bson4jackson,Extract Method,Serialization performance with large objects,https://github.com/michel-kraemer/bson4jackson/issues/97,https://github.com/michel-kraemer/bson4jackson,https://github.com/michel-kraemer/bson4jackson/commit/ffc54ec20a2b4baf3f947d155ffaed13c6a606cf,src/main/java/de/undercouch/bson4jackson/io/DynamicOutputBuffer.java/364-385,Execution Time Improvement,Fix-related,"ode changes focus on improving serialization performance, particularly for large objects, by using a bulk API for binary type. This change directly addresses performance by optimizing how bytes are put into the buffer."
665125774eb27c185fe4aae4,28c59d19c3ee1b29016d3b1f1c5d622a93d90c5e,uaa,Extract Method,"Performance Issues in SCIM User Lookup of ""/ids/Users"" Endpoint",https://github.com/cloudfoundry/uaa/issues/2705,https://github.com/cloudfoundry/uaa,https://github.com/cloudfoundry/uaa/commit/28c59d19c3ee1b29016d3b1f1c5d622a93d90c5e,server/src/test/java/org/cloudfoundry/identity/uaa/scim/endpoints/UserIdConversionEndpointsTests.java/191-201,Execution Time Improvement,Test-related,Extracting methods as part of this refactoring enhances code clarity and maintainability.
665184f24eb27c185fe54ccf,cd0f6b590fcd8832ce527ca77300ea08f5068a53,MultiThreadDownload,Rename Method,How to resume a download,https://github.com/Aspsine/MultiThreadDownload/issues/34,https://github.com/Aspsine/MultiThreadDownload,https://github.com/Aspsine/MultiThreadDownload/commit/cd0f6b590fcd8832ce527ca77300ea08f5068a53,library/src/main/java/com/aspsine/multithreaddownload/core/MultiDownloadTask.java/44-47,Execution Time Improvement,Maintenance-related,": Renaming the method from updateDBProgress to updateDB makes the method name more concise and possibly more aligned with its functionality. This improves the readability and maintainability of the code, ensuring that method names accurately reflect their purposes."
665132f64eb27c185fe4b876,aab44051f73e01c378e9924fb9a4bac44e8107cb,eventmesh,Rename Method,[Enhancement]Optimize remote service related code,https://github.com/apache/eventmesh/issues/3201,https://github.com/apache/eventmesh,https://github.com/apache/eventmesh/commit/aab44051f73e01c378e9924fb9a4bac44e8107cb,eventmesh-runtime/src/main/java/org/apache/eventmesh/runtime/boot/AbstractRemotingServer.java/82-89,Execution Time Improvement,Maintenance-related,"While renaming methods can be part of a broader refactoring effort aimed at performance optimization, it typically enhances code readability and maintainability."
66773408cd111b750c4ce988,6c41ce7c4525dd30bbfd1e78e0fc502c076c4013,oncokb,Rename Method,Fix performance issues from Mutation Conversion Icon,https://github.com/oncokb/oncokb/issues/3730,https://github.com/oncokb/oncokb,https://github.com/oncokb/oncokb/commit/6c41ce7c4525dd30bbfd1e78e0fc502c076c4013,core/src/test/java/org/mskcc/cbio/oncokb/util/AlterationUtilsTest.java/35-83,Execution Time Improvement,Test-related,Renaming methods as part of this refactoring enhances code clarity and maintainability.
664f72cf7b998c13cdbb84d7,52cb5ca4fe4818d0e91c6474be30887f00b19328,rstudio,Rename Method,rstudio_command_palette_search is slow,https://github.com/rstudio/rstudio/issues/6961,https://github.com/rstudio/rstudio,https://github.com/rstudio/rstudio/commit/52cb5ca4fe4818d0e91c6474be30887f00b19328,src/gwt/src/org/rstudio/studio/client/workbench/views/source/Source.java/781-788,Execution Time Improvement,Maintenance-related,"Renaming the method from testIsNotNull to testLinkIsNotNull improves the clarity and specificity of the test method, making it clear that the test is related to checking if a link (relationship) is not null."
6652af964eb27c185fe6c642,b58cfd2eb5020bb763475c77972708503d54dd9d,newrelic-java-agent,Rename Variable,Add stall detection to the NR java agent,https://github.com/newrelic/newrelic-java-agent/issues/1527,https://github.com/newrelic/newrelic-java-agent,https://github.com/newrelic/newrelic-java-agent/commit/b58cfd2eb5020bb763475c77972708503d54dd9d,newrelic-agent/src/main/java/com/newrelic/agent/service/slowtransactions/SlowTransactionService.java/135-135,Execution Time Improvement,Maintenance-related,The change from slowestOpenMs to slowestOpenMillis with the initialization to thresholdMillis implies a more refined handling of timing thresholds for performance monitoring.
6651a1d34eb27c185fe5677f,bdf867541d99a61342e3723d8c47e5bc653ae1cd,DSpace,Rename Variable,The search of deleted bitstreams during cleanup should be paginated,https://github.com/DSpace/DSpace/issues/8708,https://github.com/DSpace/DSpace,https://github.com/DSpace/DSpace/commit/bdf867541d99a61342e3723d8c47e5bc653ae1cd,dspace-api/src/main/java/org/dspace/storage/bitstore/BitstreamStorageServiceImpl.java/229-229,Execution Time Improvement,Maintenance-related,"Renaming variables is a maintenance-related refactoring. It enhances the readability and clarity of the code by using clear and descriptive names, making the codebase easier to understand and manage. "
667715673cbfb03cd095748a,b5a014e51204f0677653814aab08070f1a964a2c,preesm,Rename Variable,[model] Broadcast/Fork to Fork optimization after flattening is erroneous,https://github.com/preesm/preesm/issues/339,https://github.com/preesm/preesm,https://github.com/preesm/preesm/commit/b5a014e51204f0677653814aab08070f1a964a2c,plugins/org.preesm.model.pisdf/src/org/preesm/model/pisdf/util/FifoCycleDetector.java/305-305,Execution Time Improvement,Maintenance-related,"Renaming variables as part of the heuristic simplification helps in clarifying the code logic, making it easier to understand and optimize further. Clear and descriptive variable names contribute to better maintainability and potentially more effective performance tuning."
665170484eb27c185fe533bf,9055e6803bb0230e50f587d37684ce6023d1be05,sonar-cxx,Rename Variable,Scans fail with java.nio.charset.MalformedInputException in ReservedNamesCheck.visitFile,https://github.com/SonarOpenCommunity/sonar-cxx/issues/1671,https://github.com/SonarOpenCommunity/sonar-cxx,https://github.com/SonarOpenCommunity/sonar-cxx/commit/9055e6803bb0230e50f587d37684ce6023d1be05,cxx-checks/src/main/java/org/sonar/cxx/checks/metrics/TooLongLineCheck.java/86-86,Execution Time Improvement,Maintenance-related,"Renaming a variable as part of this enhancement helps improve code clarity and readability, ensuring that the purpose of the variable is clear and that the code can be easily understood and maintained."
664d69e4c6ae4438849646c5,f17112963cad4d7b489d136c3c9f6dae3567c0f5,rocketmq,Rename Variable,Support DLedger Controller Snapshot,https://github.com/apache/rocketmq/issues/5585,https://github.com/apache/rocketmq,https://github.com/apache/rocketmq/commit/f17112963cad4d7b489d136c3c9f6dae3567c0f5,broker/src/main/java/org/apache/rocketmq/broker/processor/SendMessageProcessor.java/84-84,Execution Time Improvement,Maintenance-related,"Renaming a variable as part of this enhancement helps improve code clarity and readability, ensuring that the purpose of the variable is clear and that the code can be easily understood and maintained."
6652f49f5484ec0c9ccd9ed2,eec4b37d563ec5efae5b7e97453c2410e883e678,rdf4j,Rename Variable,SHACL - ShaclSailConnection should use bulk validation if the underlying store is empty,https://github.com/eclipse-rdf4j/rdf4j/issues/3260,https://github.com/eclipse-rdf4j/rdf4j,https://github.com/eclipse-rdf4j/rdf4j/commit/eec4b37d563ec5efae5b7e97453c2410e883e678,core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/benchmark/NativeStoreBenchmark.java/175-175,Execution Time Improvement,Maintenance-related,"Renaming a variable as part of this enhancement helps improve code clarity and readability, ensuring that the purpose of the variable is clear and that the code can be easily understood and maintained."
664d1f07c6ae44388495e946,992227852390edbcc200099e95367212fc49dd68,skywalking,Add Parameter,[Feature] Build Distributed Query Module for BanyanDB,https://github.com/apache/skywalking/issues/11237,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/992227852390edbcc200099e95367212fc49dd68,apm-collector/apm-collector-agentstream/src/main/java/org/skywalking/apm/collector/agentstream/worker/serviceref/reference/ServiceRefSpanListener.java/56-56,Execution Time Improvement,Fix-related,"The addition of the int applicationId, int applicationInstanceId, and String segmentId parameters to the parseExit method suggests that the method now has direct access to these values without needing to perform additional lookups or computations to obtain them."
66772869cd111b750c4cd5f7,31979550146ee95700969edf547d610dfc28ae46,egeria-connector-ibm-information-server,Change Variable Type,Fix remaining search bugs,https://github.com/odpi/egeria-connector-ibm-information-server/issues/146,https://github.com/odpi/egeria-connector-ibm-information-server,https://github.com/odpi/egeria-connector-ibm-information-server/commit/31979550146ee95700969edf547d610dfc28ae46,igc-clientlibrary/src/main/java/org/odpi/egeria/connectors/ibm/igc/clientlibrary/model/common/Identity.java/370-370,Execution Time Improvement,Fix-related,"he refactoring involves changing the variable type from String[] to List<String>, which improves the efficiency of handling and processing identity components and tokens. By utilizing lists, the code can take advantage of more flexible and optimized data structures, potentially leading to faster execution times."
665316245484ec0c9ccdca14,4c639cbed2b33ffd8d7915dee4f792e7d6aca372,BetonQuest,Add Method Annotation,Long Waiting time in Conversations,https://github.com/BetonQuest/BetonQuest/issues/1286,https://github.com/BetonQuest/BetonQuest,https://github.com/BetonQuest/BetonQuest/commit/4c639cbed2b33ffd8d7915dee4f792e7d6aca372,src/main/java/pl/betoncraft/betonquest/conversation/Conversation.java/641-641,Execution Time Improvement,Maintenance-related,"Adding the @Override annotation to the run method ensures that it correctly overrides a method from a superclass or interface, improving code readability and maintainability. This makes the developer's intentions explicit and helps in avoiding potential issues with method overriding."
664d0025c6ae44388495b78f,0cdfa6e377e48002247ec515b7eb2a3353f5c007,NewPipe,Change Attribute Type,Allow resume of download,https://github.com/TeamNewPipe/NewPipe/issues/345,https://github.com/TeamNewPipe/NewPipe,https://github.com/TeamNewPipe/NewPipe/commit/0cdfa6e377e48002247ec515b7eb2a3353f5c007,app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java/57-57,I/O Optimization,Fix-related,"Changing the attribute type and initializing the segment_table with a fixed size of 255 bytes ensures that the handling of audio samples and segments is more efficient. This refactoring reduces the need for repeated I/O operations and seeks within the file, thereby enhancing I/O performance."
6651a8ac4eb27c185fe571e5,8c7ef0761d78ef4fe16ba373a7c1a67859b0f93a,IPED,Change Parameter Type,Refactor module configuration,https://github.com/sepinf-inc/IPED/issues/538,https://github.com/sepinf-inc/IPED,https://github.com/sepinf-inc/IPED/commit/8c7ef0761d78ef4fe16ba373a7c1a67859b0f93a,iped-engine/src/main/java/dpf/sp/gpinf/indexer/config/TaskInstallerConfig.java/69-69,I/O Optimization,Fix-related,"This commit appears to be focused on improving the way data is handled internally, which can lead to better I/O performance. The refactoring type ""Change Parameter Type"" plays a significant role in this change and is directly aimed at improving performance. By changing the parameter from File to String, it allows for more flexible handling of the input data."
66531f8c5484ec0c9ccdcf32,67883e384dcc041516d072cdbae5e3ded8d35b38,micro-integrator,Change Variable Type,CDC supoprt for MI using Debezium connector,https://github.com/wso2/micro-integrator/issues/3026,https://github.com/wso2/micro-integrator,https://github.com/wso2/micro-integrator/commit/67883e384dcc041516d072cdbae5e3ded8d35b38,components/mediation/inbound-endpoints/org.wso2.micro.integrator.inbound.endpoint/src/main/java/org/wso2/carbon/inbound/endpoint/protocol/cdc/CDCEventOutput.java/73-73,I/O Optimization,Fix-related,"touches on multiple performance aspects, with the most significant being I/O Optimization (JSON handling)"
665153574eb27c185fe50897,4748b8a4bfa274f180f6a46c75f28af815c9046b,clickhouse-java,Change Variable Type,how to batchInsert using ClickhouseHttpClient ?,https://github.com/ClickHouse/clickhouse-java/issues/861,https://github.com/ClickHouse/clickhouse-java,https://github.com/ClickHouse/clickhouse-java/commit/4748b8a4bfa274f180f6a46c75f28af815c9046b,clickhouse-client/src/main/java/com/clickhouse/client/data/ClickHouseRowBinaryProcessor.java/381-381,I/O Optimization,Fix-related,The change from using a utility method BinaryStreamUtils.readVarInt(i) to directly calling i.readVarInt() on the input stream object suggests an attempt to optimize the I/O process.
665170794eb27c185fe5341e,b9167a5f7046fc85392bea3ad222c3d5187f00af,sonar-cxx,Rename Variable,Execute decorators failing,https://github.com/SonarOpenCommunity/sonar-cxx/issues/625,https://github.com/SonarOpenCommunity/sonar-cxx,https://github.com/SonarOpenCommunity/sonar-cxx/commit/b9167a5f7046fc85392bea3ad222c3d5187f00af,sonar-cxx-plugin/src/main/java/org/sonar/plugins/cxx/xunit/CxxXunitSensor.java/223-223,I/O Optimization,Maintenance-related,"the primary goal of this change appears to be maintenance and bug fixing, it falls under the I/O Optimization category due to the potential improvements in file handling efficiency."
6651a9694eb27c185fe57487,1a30dba185e0dae79a7fd42dde47282e968dd06e,IPED,Rename Variable,DecoderException: Odd number of characters from ExportCSVTask if resuming processing,https://github.com/sepinf-inc/IPED/issues/2077,https://github.com/sepinf-inc/IPED,https://github.com/sepinf-inc/IPED/commit/1a30dba185e0dae79a7fd42dde47282e968dd06e,iped-engine/src/main/java/iped/engine/task/ExportCSVTask.java/348-348,I/O Optimization,Maintenance-related,"It directly addresses how data is read from files, moving from a higher-level string representation to a more efficient byte-level representation. This change can lead to faster I/O operations,"
66531dee5484ec0c9ccdcc30,397a5d735b9187f9d9f95f22d60700c881517f69,QuranApp,Change Attribute Type,Media buttons support and auto-pause on headphones disconnect,https://github.com/AlfaazPlus/QuranApp/issues/221,https://github.com/AlfaazPlus/QuranApp,https://github.com/AlfaazPlus/QuranApp/commit/397a5d735b9187f9d9f95f22d60700c881517f69,app/src/main/java/com/quranapp/android/utils/reader/recitation/RecitationUtils.java/48-48,Memory Optimization,Fix-related,"Changing the attribute type from String to int can optimize memory usage, as integers typically consume less memory than strings. This is particularly beneficial when dealing with constants that are used frequently throughout the code, reducing the overall memory footprint."
6652f5545484ec0c9ccda0f7,82f48d4a129639dbc8d14312443ff4b7e7d3922a,rdf4j,Change Attribute Type,String encoding in binary RDF format,https://github.com/eclipse-rdf4j/rdf4j/issues/3010,https://github.com/eclipse-rdf4j/rdf4j,https://github.com/eclipse-rdf4j/rdf4j/commit/82f48d4a129639dbc8d14312443ff4b7e7d3922a,core/rio/binary/src/main/java/org/eclipse/rdf4j/rio/binary/BinaryRDFWriter.java/71-71,Memory Optimization,Fix-related,"Changing the attribute type from Map<Value, AtomicInteger> to Map<Value, ValueMeta> suggests an optimization where the ValueMeta class likely encapsulates more information than just a frequency count, potentially including more efficiently stored data."
664f5cc47b998c13cdbb6c12,1c6b5b6dc954416ad67a90e1a29d0f09a616a620,graphhopper,Change Attribute Type,Use dynamic flag assignment in flag encoders,https://github.com/graphhopper/graphhopper/issues/66,https://github.com/graphhopper/graphhopper,https://github.com/graphhopper/graphhopper/commit/1c6b5b6dc954416ad67a90e1a29d0f09a616a620,core/src/main/java/com/graphhopper/reader/OSMReader.java/46-46,Memory Optimization,Fix-related,"Changing the attribute type from AcceptWay to EncodingManager and initializing it to null is likely aimed at optimizing memory usage. By centralizing encoding management, the system can reduce the number of local encoder instances and manage resources more efficiently."
6651a99d4eb27c185fe574c2,609ca1da5492f9ffd49aa1642cfc66ecdedfa6dc,FreeBuilder,Change Attribute Type,Issues converting to a Builder,https://github.com/inferred/FreeBuilder/issues/264,https://github.com/inferred/FreeBuilder,https://github.com/inferred/FreeBuilder/commit/609ca1da5492f9ffd49aa1642cfc66ecdedfa6dc,src/main/java/org/inferred/freebuilder/processor/Metadata_Builder.java/84-84,Memory Optimization,Fix-related,"Changing the attribute type from ArrayList to ImmutableList optimizes memory usage and performance. ImmutableList can be more memory-efficient and can also improve performance in certain contexts by providing better guarantees for immutability, leading to fewer memory overheads associated with changes to the list."
6652d9695484ec0c9ccd87ca,927203c06c448282130d32bc18781f33565353cf,cloudsimplus,Change Attribute Type,"Virtual memory and BW oversubscription implementation: when a Cloudlet requests more RAM or BW than there is available, its execution should be delayed",https://github.com/cloudsimplus/cloudsimplus/issues/170,https://github.com/cloudsimplus/cloudsimplus,https://github.com/cloudsimplus/cloudsimplus/commit/927203c06c448282130d32bc18781f33565353cf,cloudsim-plus/src/main/java/org/cloudbus/cloudsim/hosts/HostSimple.java/89-89,Memory Optimization,Fix-related,"changes to handle virtual memory and bandwidth oversubscription. By redesigning the Host storage to use HarddriveStorage with specific disk parameters, the system can better manage memory usage and delay execution when resources are oversubscribed."
6652be395484ec0c9ccd72c4,66560e4d4e6decde81089d7c1af1cd7a3e095ac1,lisa,Change Attribute Type,[BUG] Enforce ordering in string representations of abstract states,https://github.com/lisa-analyzer/lisa/issues/46,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/66560e4d4e6decde81089d7c1af1cd7a3e095ac1,lisa/src/main/java/it/unive/lisa/util/collections/externalSet/ExternalSetCache.java/28-28,Memory Optimization,Fix-related,"Changing the attribute type from ConcurrentMap to Map (specifically HashMap) can improve memory usage and performance when concurrency is not required. ConcurrentHashMap has additional overhead to support thread safety, which may not be necessary in this context."
6652bcd75484ec0c9ccd6eca,c6fc8be02e93ede6965939e535d91fb1382c4700,kitodo-production,Change Attribute Type,Creating newspaper issues is slow and fails with OutOfMemoryError,https://github.com/kitodo/kitodo-production/issues/4210,https://github.com/kitodo/kitodo-production,https://github.com/kitodo/kitodo-production/commit/c6fc8be02e93ede6965939e535d91fb1382c4700,Kitodo/src/main/java/org/kitodo/production/services/command/CommandService.java/30-30,Memory Optimization,Fix-related,"Changing the attribute type from CommandService to CommandInterface and ensuring it is loaded only once helps optimize memory usage by potentially reducing redundant service instances and lowering memory overhead. This refactoring helps in managing memory more efficiently, thereby addressing the OutOfMemoryError and improving overall performance."
664ec6457b998c13cdba94bb,8bd2035239722eb4e1232890092c3d0ffbd70058,beam,Change Parameter Type,"Java build flakes: ""Memory constraints are impeding performance""",https://github.com/apache/beam/issues/20819,https://github.com/apache/beam,https://github.com/apache/beam/commit/8bd2035239722eb4e1232890092c3d0ffbd70058,sdks/java/core/src/test/java/org/apache/beam/sdk/io/SimpleSink.java/95-95,Memory Optimization,Fix-related,Changing the parameter type from SimpleSink to SimpleSink<DestinationT> improves the type safety and flexibility of the method by using a generic type parameter.
6652bd2a5484ec0c9ccd6f1c,13404f67c77af600897f78588c8df74e962a5e84,irida,Change Return Type,Improve line list performance,https://github.com/phac-nml/irida/issues/991,https://github.com/phac-nml/irida,https://github.com/phac-nml/irida/commit/13404f67c77af600897f78588c8df74e962a5e84,src/main/java/ca/corefacility/bioinformatics/irida/repositories/sample/MetadataEntryRepositoryImpl.java/34-34,Memory Optimization,Fix-related,"Changing the return type from Map<Sample, Set<MetadataEntry>> to Map<Long, Set<MetadataEntry>> involves returning the sample ID (Long) instead of the entire Sample object. This change can optimize memory usage, as it reduces the amount of data held in memory by storing only the IDs rather than full objects. Thus, it aligns with memory optimization."
6652bc7f5484ec0c9ccd6dda,74cb268426809fe2e1c404c0c1ebae2c622710b6,HuskHomes,Change Return Type,little stuck on getServer ,https://github.com/WiIIiam278/HuskHomes/issues/197,https://github.com/WiIIiam278/HuskHomes,https://github.com/WiIIiam278/HuskHomes/commit/74cb268426809fe2e1c404c0c1ebae2c622710b6,bukkit/src/main/java/net/william278/huskhomes/BukkitHuskHomes.java/390-390,Memory Optimization,Fix-related,"this change falls under both Memory Optimization and Execution Time Improvement categories. By implementing a caching system for server data, the developers are directly addressing performance issues related to server data retrieval."
6651898c4eb27c185fe55b38,b19267ab558e94157710afb725898f76b41127ed,Payara,Change Return Type,Memory wastage - JavaEETransactionImpl,https://github.com/payara/Payara/issues/3396,https://github.com/payara/Payara,https://github.com/payara/Payara/commit/b19267ab558e94157710afb725898f76b41127ed,appserver/transaction/jta/src/main/java/com/sun/enterprise/transaction/JavaEETransactionImpl.java/286-286,Memory Optimization,Fix-related," Changing the return type from ArrayList<String> to List<String> allows for more flexible and potentially more efficient memory usage. By returning a generic List, the implementation can later be optimized or changed without affecting the method's signature."
664f61727b998c13cdbb6d81,cd5ce3255f348f5807bce470db8b6376301f0c79,pmd,Change Variable Type,[java] InsufficientStringBufferDeclaration should consider literal expression,https://github.com/pmd/pmd/issues/3845,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/cd5ce3255f348f5807bce470db8b6376301f0c79,pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/InsufficientStringBufferDeclarationRule.java/300-300,Memory Optimization,Fix-related,The use of MutableOptionalInt instead of MutableInt allows for a more precise representation of the state. It can now distinguish between an unset value and a valid -1 value
665189904eb27c185fe55b41,3b0156cda02ee98c1d86f57ddeaa58702043df41,Payara,Change Variable Type,Memory wastage - JavaEETransactionImpl,https://github.com/payara/Payara/issues/3396,https://github.com/payara/Payara,https://github.com/payara/Payara/commit/3b0156cda02ee98c1d86f57ddeaa58702043df41,appserver/transaction/jta/src/main/java/com/sun/enterprise/transaction/JavaEETransactionManagerSimplified.java/1180-1180,Memory Optimization,Fix-related,Changing the variable types to use more specific and efficient collections (ConcurrentHashMap and typed ArrayList<TransactionAdminBean>) enhances memory management. This refactoring helps to ensure that memory is used more efficiently by avoiding unnecessary memory allocation and improving the handling of active transactions.
664f65537b998c13cdbb771b,7c32587453bdd00a2b0c8d12694666330e991ed5,bisq,Extract Method,Improve DAO state peristence,https://github.com/bisq-network/bisq/issues/5783,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/7c32587453bdd00a2b0c8d12694666330e991ed5,core/src/main/java/bisq/core/dao/state/DaoStateSnapshotService.java/320-322,Memory Optimization,Fix-related,"code changes focus on improving persistence performance and reducing memory requirements for snapshots. The refactoring type, ""Extract Method,"" plays an important role in optimizing performance. By extracting the method getHashChainForSnapshot, the code becomes more modular, making it easier to manage and optimize how blocks are handled and persisted. "
664f7efb7b998c13cdbb898b,9c122ea297d7ccd600f9b21e81874320c1203944,killbill,Rename Variable,Direct buffer leak detection when using redis cache,https://github.com/killbill/killbill/issues/1063,https://github.com/killbill/killbill,https://github.com/killbill/killbill/commit/9c122ea297d7ccd600f9b21e81874320c1203944,util/src/main/java/org/killbill/billing/util/cache/CacheControllerDispatcherProvider.java/64-64,Memory Optimization,Maintenance-related,Renaming variables to improve code readability can indirectly support performance optimization efforts by making the code easier to understand and maintain.
665195dc4eb27c185fe56209,8a2eba69f19d106f41105b99037b5cd9dce6eb95,dataverse,Change Attribute Type,Only use one HttpSolrClient object per Solr server (i.e. One HttpSolrClient),https://github.com/IQSS/dataverse/issues/6005,https://github.com/IQSS/dataverse,https://github.com/IQSS/dataverse/commit/8a2eba69f19d106f41105b99037b5cd9dce6eb95,src/main/java/edu/harvard/iq/dataverse/search/SearchServiceBean.java/76-76,Network Performance Optimization,Fix-related,"Changing the attribute from a direct SolrClient instance to an EJB-managed SolrClientService can also be seen as an optimization of network performance. By utilizing a singleton service, the application can reduce the number of network connections and interactions with the Solr server, leading to more efficient use of network resources and potentially lower latency."
664d2f09c6ae44388495ff3f,f9257f5274f6a55e8bf8424444707aecf7a1f2c1,skywalking,Move Class,Support alarm labels,https://github.com/apache/skywalking/issues/5124,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/f9257f5274f6a55e8bf8424444707aecf7a1f2c1,oap-server/analyzer/agent-analyzer/src/main/java/org/apache/skywalking/oap/server/analyzer/provider/trace/parser/listener/SegmentAnalysisListener.java/38-190,Network Performance Optimization,Fix-related,an intent to optimize data handling and network performance in a distributed system.
664d02e3c6ae44388495ba28,1d42e45d785b955f7f2dfc38c4da168cd7601e27,NewPipe,Add Parameter,Background Player buffers frequently,https://github.com/TeamNewPipe/NewPipe/issues/4687,https://github.com/TeamNewPipe/NewPipe,https://github.com/TeamNewPipe/NewPipe/commit/1d42e45d785b955f7f2dfc38c4da168cd7601e27,app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java/520-520,Network Performance Optimization,Maintenance-related,"This refactoring improves the maintainability and flexibility of the code by standardizing how VideoDetailFragment is opened. By adding these parameters, the method can handle more cases and provide a more consistent way of passing data."
6652d7e55484ec0c9ccd84d8,5d63c33a26c6f891713a9a1d6555ec11c4ab840a,Android-nRF-Mesh-Library,Add Method Annotation,Nodes have all the same unicastaddress,https://github.com/NordicSemiconductor/Android-nRF-Mesh-Library/issues/320,https://github.com/NordicSemiconductor/Android-nRF-Mesh-Library,https://github.com/NordicSemiconductor/Android-nRF-Mesh-Library/commit/5d63c33a26c6f891713a9a1d6555ec11c4ab840a,mesh/src/main/java/no/nordicsemi/android/mesh/models/ConfigurationServerModel.java/82-82,Reliability and Stability Improvement,Maintenance-related,"Adding the @Nullable annotation to the getHeartbeatPublication method suggests an improvement in the way null values are handled. This change can help prevent potential null pointer exceptions, thereby improving the reliability and stability of the system."
6652e53b5484ec0c9ccd920d,b7b7329fa70e21fe76146f54d0f4ff1857c1478b,Ice_and_Fire,Add Method Annotation,Severe performance issues with Citadel and Ice & Fire [iceandfire-2.1.9-1.16.5],https://github.com/AlexModGuy/Ice_and_Fire/issues/4393,https://github.com/AlexModGuy/Ice_and_Fire,https://github.com/AlexModGuy/Ice_and_Fire/commit/b7b7329fa70e21fe76146f54d0f4ff1857c1478b,src/main/java/com/github/alexthe666/iceandfire/entity/props/SirenProperties.java/96-96,Reliability and Stability Improvement,Fix-related,"Adding the @Nullable annotation improves code clarity by explicitly indicating that the getSiren method can return null. This enhances the reliability and stability of the code by making it clear to developers and tools that the return value needs to be checked for nullability, helping to prevent potential null pointer exceptions."
664f2e657b998c13cdbb1aab,821ca8483a1741571c134de114bef07ff969583c,btrace,Add Parameter,java.lang.VerifyError: Bad return type,https://github.com/btraceio/btrace/issues/160,https://github.com/btraceio/btrace,https://github.com/btraceio/btrace/commit/821ca8483a1741571c134de114bef07ff969583c,src/share/classes/com/sun/btrace/runtime/ClassFilter.java/159-159,Reliability and Stability Improvement,Fix-related,"Adding parameters (ClassLoader loader and boolean subClassChecks) to the method enhances its ability to handle more specific scenarios related to class loading and superclass checks. This refactoring is fix-related as it addresses a specific runtime error and ensures that the code can correctly handle different class hierarchies, thus improving the reliability and stability of the instrumentation process."
665193e74eb27c185fe55ef9,de6beffa71c36fc10017de6f7f615089eddf7f19,dataverse,Add Parameter,New filter-based design for the API authentication mechanisms,https://github.com/IQSS/dataverse/issues/9293,https://github.com/IQSS/dataverse,https://github.com/IQSS/dataverse/commit/de6beffa71c36fc10017de6f7f615089eddf7f19,src/main/java/edu/harvard/iq/dataverse/api/Datasets.java/472-472,Reliability and Stability Improvement,Maintenance-related,"The refactoring appears to be part of a larger effort to standardize user authentication and request handling across the API, which can lead to more maintainable and secure code in the long run."
66531d805484ec0c9ccdcbfd,d50d1a8081261be88a823ea563433db28ca64039,confluence-publisher,Add Parameter,Plugin might delete every page with the same title,https://github.com/confluence-publisher/confluence-publisher/issues/362,https://github.com/confluence-publisher/confluence-publisher,https://github.com/confluence-publisher/confluence-publisher/commit/d50d1a8081261be88a823ea563433db28ca64039,asciidoc-confluence-publisher-client/src/main/java/org/sahli/asciidoc/confluence/publisher/client/http/HttpRequestFactory.java/155-155,Reliability and Stability Improvement,Maintenance-related,"Adding the ancestorId parameter to the getPageByTitleRequest method helps to filter pages by their ancestor ID, ensuring that only the relevant pages are fetched and processed. "
6677156a3cbfb03cd095748f,8534b3a11eceaa853ca5f1e554d56a3c93da033f,preesm,Add Parameter,[model] Broadcast/Fork to Fork optimization after flattening is erroneous,https://github.com/preesm/preesm/issues/339,https://github.com/preesm/preesm,https://github.com/preesm/preesm/commit/8534b3a11eceaa853ca5f1e554d56a3c93da033f,plugins/org.preesm.algorithm/src/org/preesm/algorithm/pisdf/autodelays/HeuristicLoopBreakingDelays.java/292-292,Reliability and Stability Improvement,Maintenance-related,Adding the CycleInfos parameter to the retrieveBreakingFifo method improves the reliability and stability of the code by providing additional context and information necessary for processing cycles.
6652ad1f4eb27c185fe6bfa1,f40a47d4dd87d894460164bab985cbd10aa01f39,stroom,Add Parameter,Local Explorer tree cache is not refreshed when a create/delete occurs on another node,https://github.com/gchq/stroom/issues/3228,https://github.com/gchq/stroom,https://github.com/gchq/stroom/commit/f40a47d4dd87d894460164bab985cbd10aa01f39,stroom-core-client/src/main/java/stroom/view/client/presenter/ViewSettingsPresenter.java/57-57,Reliability and Stability Improvement,Maintenance-related,"the issue mentions a problem with the Local Explorer tree cache not refreshing, the provided commit and code changes are focused on improving the functionality of pipeline filtering. This falls under Reliability and Stability Improvement as it enhances the system's ability to consistently present relevant data to users."
6652bbba5484ec0c9ccd6beb,095de3599a79668c1e3c3cfd4935793299fbc200,SukakuExplainer,Add Parameter,Move cell values and potentials to grid,https://github.com/SudokuMonster/SukakuExplainer/issues/26,https://github.com/SudokuMonster/SukakuExplainer,https://github.com/SudokuMonster/SukakuExplainer/commit/095de3599a79668c1e3c3cfd4935793299fbc200,diuf/sudoku/solver/rules/unique/Bug1Hint.java/45-45,Reliability and Stability Improvement,Maintenance-related,"This commit addresses an issue related to passing the grid as a parameter in IndirectHint, which falls under the category of Reliability and Stability Improvement. The change aims to make the system more robust by providing necessary context (the grid) to the method."
664eff957b998c13cdbad9b0,5f57e24ccc36b829b5eb5a7b34bebb6760e201c1,processing,Add Parameter,Blending innacuracies (particularly ADD),https://github.com/processing/processing/issues/172,https://github.com/processing/processing,https://github.com/processing/processing/commit/5f57e24ccc36b829b5eb5a7b34bebb6760e201c1,core/src/processing/core/PImage.java/2649-2649,Reliability and Stability Improvement,Fix-related,"The commit addresses inaccuracies in the blending process, specifically with the ADD blend mode. By revising the blend modes, the update ensures more accurate and reliable color blending, enhancing the visual stability and correctness of the graphics rendered."
665301a25484ec0c9ccdb496,c2a078774709b5b2dfe3d14d6c9365c831b639f3,SORMAS-Project,Add Parameter,S2S_automatic update in the share-box [1],https://github.com/SORMAS-Foundation/SORMAS-Project/issues/8471,https://github.com/SORMAS-Foundation/SORMAS-Project,https://github.com/SORMAS-Foundation/SORMAS-Project/commit/c2a078774709b5b2dfe3d14d6c9365c831b639f3,sormas-ui/src/main/java/de/symeda/sormas/ui/sormastosormas/SormasToSormasController.java/92-92,Reliability and Stability Improvement,Fix-related,"Adding the Runnable callback parameter allows for more flexible and reliable handling of post-share operations. By introducing a callback mechanism, the code ensures that additional actions can be performed reliably after the sharing process completes."
664f034a7b998c13cdbae0f9,1fe42344488d28b4b13aab4dc7382eb3ad3f6dc3,junit5,Add Parameter,Timeout incorrectly reported instead of actual failing assertion when using isEqualTo with SEPARATE_THREAD,https://github.com/junit-team/junit5/issues/3000,https://github.com/junit-team/junit5,https://github.com/junit-team/junit5/commit/1fe42344488d28b4b13aab4dc7382eb3ad3f6dc3,junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java/176-176,Reliability and Stability Improvement,Fix-related,"Adding the FutureResolverWithExceptionHandling resolver parameter allows for more specific and effective handling of timeouts and exceptions. This refactoring enhances the robustness of the code by ensuring that timeouts and exceptions are managed properly, leading to more accurate and reliable assertions."
667727e7cd111b750c4cd56c,22a08c6ce80b246e35b74d40d6acf52763e106d7,extension-springcloud,Change Attribute Type,The blackListedServiceInstances in SpringCloudCommandRouter should be reevaluated from time to time,https://github.com/AxonFramework/extension-springcloud/issues/6,https://github.com/AxonFramework/extension-springcloud,https://github.com/AxonFramework/extension-springcloud/commit/22a08c6ce80b246e35b74d40d6acf52763e106d7,springcloud/src/main/java/org/axonframework/extensions/springcloud/commandhandling/mode/IgnoreListingCapabilityDiscoveryMode.java/49-49,Reliability and Stability Improvement,Fix-related,"Changing the attribute type from Set<String> to Set<ServiceInstance> ensures that the system accurately tracks and matches service instances, considering their host and port combinations."
6652be175484ec0c9ccd7206,bd3f85d889f002d5f2ac8191d1dde21feace6268,Universal-FE-Randomizer,Change Attribute Type,FE9 Crash on Wii,https://github.com/lushen124/Universal-FE-Randomizer/issues/249,https://github.com/lushen124/Universal-FE-Randomizer,https://github.com/lushen124/Universal-FE-Randomizer/commit/bd3f85d889f002d5f2ac8191d1dde21feace6268,Universal FE Randomizer/src/fedata/gcnwii/fe9/FE9ChapterArmy.java/21-21,Reliability and Stability Improvement,Maintenance-related,"mprovements in file handling and hardware compatibility can indirectly lead to better performance, especially in terms of stability and correct functioning on the target hardware."
66771fa8cd111b750c4cc999,32c9bb499ffbf0ba0231137e74aa163fd8169fed,HubTurbo,Change Attribute Type,Syncing stuck halfway,https://github.com/HubTurbo/HubTurbo/issues/475,https://github.com/HubTurbo/HubTurbo,https://github.com/HubTurbo/HubTurbo/commit/32c9bb499ffbf0ba0231137e74aa163fd8169fed,src/service/updateservice/UpdateService.java/38-38,Reliability and Stability Improvement,Maintenance-related,"code changes are focused on revising the UpdateService API to handle updates more gracefully, assuming success in case of failure and providing reasonable defaults."
6652da005484ec0c9ccd8bf9,c3fc76406a2cbc267274aa3866093ed6b5bfd257,joinfaces,Change Attribute Type,Typesafe Class parameters/properties,https://github.com/joinfaces/joinfaces/issues/245,https://github.com/joinfaces/joinfaces,https://github.com/joinfaces/joinfaces/commit/c3fc76406a2cbc267274aa3866093ed6b5bfd257,jsf-spring-boot-autoconfigure/src/main/java/org/joinfaces/myfaces/MyfacesProperties.java/349-349,Reliability and Stability Improvement,Maintenance-related,Changing the attribute type from String to Class<? extends SerialFactory> ensures type safety and reduces the likelihood of runtime errors related to incorrect types.
664d1ed1c6ae44388495e846,2042709b029f303c0e35d678cbc8f271db0d8359,skywalking,Change Attribute Type,[Feature] Build Distributed Query Module for BanyanDB,https://github.com/apache/skywalking/issues/11237,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/2042709b029f303c0e35d678cbc8f271db0d8359,apm-collector/apm-collector-client/src/main/java/org/skywalking/apm/collector/client/elasticsearch/ElasticSearchClient.java/31-31,Reliability and Stability Improvement,Fix-related,"Changing the attribute type from String to Boolean ensures that the clusterTransportSniffer attribute can only hold true or false values, which prevents potential misuse or incorrect value assignments."
6652d7e75484ec0c9ccd84dd,7195f63fa9ae34e7c1ebf4cc50c0d6cc8dfc2292,Android-nRF-Mesh-Library,Change Attribute Type,Nodes have all the same unicastaddress,https://github.com/NordicSemiconductor/Android-nRF-Mesh-Library/issues/320,https://github.com/NordicSemiconductor/Android-nRF-Mesh-Library,https://github.com/NordicSemiconductor/Android-nRF-Mesh-Library/commit/7195f63fa9ae34e7c1ebf4cc50c0d6cc8dfc2292,app/src/main/java/no/nordicsemi/android/nrfmesh/node/HeartbeatPublicationActivity.java/105-105,Reliability and Stability Improvement,Maintenance-related,"Changing the attribute type to ConstraintLayout for publicationCountContainer ensures that the layout is handled correctly, which can prevent potential layout-related issues and improve the overall stability of the user interface."
6652d9fd5484ec0c9ccd8bf2,cd4274109b771cd9f4e191b4a1dc11f0720875c6,joinfaces,Change Attribute Type,Typesafe Class parameters/properties,https://github.com/joinfaces/joinfaces/issues/245,https://github.com/joinfaces/joinfaces,https://github.com/joinfaces/joinfaces/commit/cd4274109b771cd9f4e191b4a1dc11f0720875c6,jsf-spring-boot-autoconfigure/src/main/java/org/joinfaces/javaxfaces/JavaxFacesProperties.java/131-131,Reliability and Stability Improvement,Maintenance-related,"This refactoring improves the maintainability and clarity of the code by ensuring that the attribute is explicitly typed, making it easier to understand and work with. Strong typing also helps with better code validation and error checking, further enhancing the reliability and stability of the system."
6652beea5484ec0c9ccd77c4,24709052600807b063fc1b01fbe174afd11dcb0c,DiscordIntegration-Forge,Change Parameter Type,[Bug]: [Forge 1.16.5] Server crashes almost every time it restarts/starts up,https://github.com/ErdbeerbaerLP/DiscordIntegration-Forge/issues/419,https://github.com/ErdbeerbaerLP/DiscordIntegration-Forge,https://github.com/ErdbeerbaerLP/DiscordIntegration-Forge/commit/24709052600807b063fc1b01fbe174afd11dcb0c,src/main/java/de/erdbeerbaerlp/dcintegration/forge/DiscordIntegration.java/251-251,Reliability and Stability Improvement,Fix-related,"The refactoring type ""Change Parameter Type"" is directly related to the fix implemented in this code snippet. Changing the event type from ServerStoppingEvent to ServerStoppedEvent is a crucial part of addressing the issues mentioned in the commi"
665140224eb27c185fe4cff6,aef286fbf71575176ecfbc283fa4f88ddb8e33ab,HiBench,Change Parameter Type,error ./prepare.sh: line 25: INPUT_HDFS: unbound variable,https://github.com/Intel-bigdata/HiBench/issues/93,https://github.com/Intel-bigdata/HiBench,https://github.com/Intel-bigdata/HiBench/commit/aef286fbf71575176ecfbc283fa4f88ddb8e33ab,src/sparkbench/src/main/java/com/intel/sparkbench/JavaBayes.java/169-169,Reliability and Stability Improvement,Fix-related,"The change from Integer to Long is a fix-related refactoring aimed at improving the overall reliability and correctness of the Bayes implementation, particularly when dealing with large datasets or high-dimensional feature spaces."
664f034b7b998c13cdbae0fe,36550401836858a1e6987b06d4c15f3ed95c19d0,junit5,Change Parameter Type,Timeout incorrectly reported instead of actual failing assertion when using isEqualTo with SEPARATE_THREAD,https://github.com/junit-team/junit5/issues/3000,https://github.com/junit-team/junit5,https://github.com/junit-team/junit5/commit/36550401836858a1e6987b06d4c15f3ed95c19d0,junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java/240-240,Reliability and Stability Improvement,Fix-related,"the change addresses an issue where timeouts were incorrectly reported instead of actual failing assertions. This adjustment aims to improve the reliability and accuracy of the assertion mechanism, which is crucial for the stability of the system."
6652dc325484ec0c9ccd919e,57cd32c76ac6fae012def42e6d9357cb97e9c630,jandex,Change Parameter Type,Error when running on Java 21-ea,https://github.com/smallrye/jandex/issues/310,https://github.com/smallrye/jandex,https://github.com/smallrye/jandex/commit/57cd32c76ac6fae012def42e6d9357cb97e9c630,core/src/main/java/org/jboss/jandex/StrongInternPool.java/221-221,Reliability and Stability Improvement,Fix-related,"Changing the parameter type from E to Object in the offset method ensures that the method can correctly handle the special NULL marker object, which may not be of type E. This refactoring addresses a specific issue with null handling that could lead to runtime errors, making it a fix-related improvement."
664e81bf7b998c13cdba53e0,d07b1b96dde6e1e3d78fc3383b0b9bb21840328c,cryptomator,Change Parameter Type,Support for FUSE-T (macOS FUSE implementation without kext),https://github.com/cryptomator/cryptomator/issues/2482,https://github.com/cryptomator/cryptomator,https://github.com/cryptomator/cryptomator/commit/d07b1b96dde6e1e3d78fc3383b0b9bb21840328c,src/main/java/org/cryptomator/ui/preferences/VolumePreferencesController.java/34-34,Reliability and Stability Improvement,Maintenance-related,"This refactoring enhances the maintainability and reliability of the code by using a more appropriate type for selectedMountService. It ensures that the method handles mount services more accurately and consistently, reducing the likelihood of errors."
664d0042c6ae44388495b855,4292ca94ff6d36602bd3834f9ebc544a61c19272,NewPipe,Change Parameter Type,Allow resume of download,https://github.com/TeamNewPipe/NewPipe/issues/345,https://github.com/TeamNewPipe/NewPipe,https://github.com/TeamNewPipe/NewPipe/commit/4292ca94ff6d36602bd3834f9ebc544a61c19272,app/src/main/java/us/shandian/giga/get/DownloadMission.java/213-213,Reliability and Stability Improvement,Maintenance-related,This refactoring enhances the maintainability and reliability of the code by making the openConnection method more flexible and appropriately handling different types of HTTP requests.
66771f9dcd111b750c4cc985,2f4d3410892660f5af180723e77f3970a579ccd4,HubTurbo,Change Parameter Type,Syncing stuck halfway,https://github.com/HubTurbo/HubTurbo/issues/475,https://github.com/HubTurbo/HubTurbo,https://github.com/HubTurbo/HubTurbo/commit/2f4d3410892660f5af180723e77f3970a579ccd4,src/service/ModelUpdater.java/36-36,Reliability and Stability Improvement,Maintenance-related,Changing the parameter type from String to Date for the issueCheckTime parameter improves the reliability and stability of the code by ensuring that date information is handled in a more appropriate and type-safe manner. This prevents potential errors related to date formatting and parsing.
6653086a5484ec0c9ccdbd4e,92d131ca4fe9f6b977a570fe993c0bd0c9f38b45,megamek,Change Parameter Type,Attack Sprite ToHit is wrong after deleting an attack,https://github.com/MegaMek/megamek/issues/4501,https://github.com/MegaMek/megamek,https://github.com/MegaMek/megamek/commit/92d131ca4fe9f6b977a570fe993c0bd0c9f38b45,megamek/src/megamek/client/ui/swing/tooltip/EntityActionLog.java/317-317,Reliability and Stability Improvement,Maintenance-related,Changing the parameter type and method name to better reflect the nature of the actions being added (addWeapon to addEntityAction and ProtomechPhysicalAttackAction to ProtomechPhysicalAttackAction) improves the clarity and maintainability of the code. This change helps in reducing potential errors and makes the codebase more understandable and reliable.
66773f27cd111b750c4cf24f,c6157556cc47d91897d9144c7dd2311fb31b6615,Biomancy,Change Parameter Type,Energy problem in chewer/digester cycle.,https://github.com/Elenterius/Biomancy/issues/8,https://github.com/Elenterius/Biomancy,https://github.com/Elenterius/Biomancy/commit/c6157556cc47d91897d9144c7dd2311fb31b6615,src/main/java/com/github/elenterius/biomancy/recipe/DigesterRecipe.java/46-46,Reliability and Stability Improvement,Maintenance-related,"Changing the parameter type from AbstractBioMechanicalRecipe to AbstractProductionRecipe in the areRecipesEqual method aims to improve the reliability and stability of the recipe comparison logic. By using a more specific or appropriate recipe type, the method can handle comparisons more accurately and reduce the risk of errors."
665199e84eb27c185fe5662d,d0c70e7b9e78ab250088f488465d7b8081ead008,dataverse,Change Parameter Type,"Dataset Migration API: Cannot migrate a dataset using example json-ld file, complains about Contact E-mail being null though it is specified. (testSemanticMetadataAPIs)",https://github.com/IQSS/dataverse/issues/8533,https://github.com/IQSS/dataverse,https://github.com/IQSS/dataverse/commit/d0c70e7b9e78ab250088f488465d7b8081ead008,src/main/java/edu/harvard/iq/dataverse/ingest/IngestServiceBean.java/158-158,Reliability and Stability Improvement,Maintenance-related,"issue related to a dataset migration API, where an error was being thrown due to a null Contact E-mail. The change from Boolean to boolean does not suggest a direct impact on performance optimization."
6652f34d5484ec0c9ccd9b5f,2e8ece0b97c53fc96f8cbe1e9c3d63c3d8944eb4,osmeditor4android,Change Parameter Type,"Improve notification queue flushing (was: Toast notifications are excessive, obscure buttons and fields)",https://github.com/MarcusWolschon/osmeditor4android/issues/2367,https://github.com/MarcusWolschon/osmeditor4android,https://github.com/MarcusWolschon/osmeditor4android/commit/2e8ece0b97c53fc96f8cbe1e9c3d63c3d8944eb4,src/main/java/de/blau/android/util/Snack.java/222-222,Reliability and Stability Improvement,Maintenance-related,"The commit  focuses on improving the notification queue flushing to address excessive toast notifications, which obscured buttons and fields. By supporting queuing for toasts, this change enhances the reliability and stability of the notification system."
66515f384eb27c185fe51bb5,f4037730ebad57a884e6bbb4f72b3d5f91da2b86,digdag,Change Parameter Type,spurious TaskConflictException in WorkflowExecutor,https://github.com/treasure-data/digdag/issues/211,https://github.com/treasure-data/digdag,https://github.com/treasure-data/digdag/commit/f4037730ebad57a884e6bbb4f72b3d5f91da2b86,digdag-core/src/test/java/io/digdag/core/database/DatabaseQueueTest.java/243-243,Reliability and Stability Improvement,Test-related,"This refactoring ensures that tasks are uniquely identified even when retried in quick succession, thereby preventing TaskConflictException and improving the overall stability of the system."
664e64e47b998c13cdba3af4,d7a093ba3393f622506ebb559762e0f5cd9c4fa2,realm-java,Change Parameter Type,BadVersionException in TableQuery.cpp line 1131,https://github.com/realm/realm-java/issues/3802,https://github.com/realm/realm-java,https://github.com/realm/realm-java/commit/d7a093ba3393f622506ebb559762e0f5cd9c4fa2,realm/realm-library/src/main/java/io/realm/RealmResults.java/682-682,Reliability and Stability Improvement,Fix-related,"Changing the parameter type from Collection<?> to java.util.Collection<?> specifies the exact type to be used, which can help in avoiding ambiguities and ensuring that the correct methods are invoked. This change enhances type safety and ensures that the code interacts with the appropriate collection interfaces, thereby improving the stability and reliability of the code."
665185374eb27c185fe54d53,ee07dba1811efb5dbd12cd8c651819347cfd86bc,eo,Change Return Type,Not all objects should be copied while dispatch,https://github.com/objectionary/eo/issues/3060,https://github.com/objectionary/eo,https://github.com/objectionary/eo/commit/ee07dba1811efb5dbd12cd8c651819347cfd86bc,eo-runtime/src/main/java/org/eolang/Phi.java/147-147,Reliability and Stability Improvement,Fix-related,", this is primarily a Reliability and Stability Improvement, with a focus on enhancing the control over object handling during dispatch operations."
664f034d7b998c13cdbae109,254bb5e20c4f4fed129dd1fd972d5a6c5a180353,junit5,Change Return Type,Timeout incorrectly reported instead of actual failing assertion when using isEqualTo with SEPARATE_THREAD,https://github.com/junit-team/junit5/issues/3000,https://github.com/junit-team/junit5,https://github.com/junit-team/junit5/commit/254bb5e20c4f4fed129dd1fd972d5a6c5a180353,junit-jupiter-api/src/main/java/org/junit/jupiter/api/AssertTimeout.java/245-245,Reliability and Stability Improvement,Fix-related,"Changing the return type from void to AssertionFailedError in the handleTimeout method directly improves the way timeouts are handled and reported. This change is fix-related as it aims to correct the problem of misreported timeouts, thereby ensuring the correct exceptions are thrown and improving the reliability of the assertions."
6652f3345484ec0c9ccd9b24,6c09685ac77540eef0e7cccc285d85e72f55f0cb,osmeditor4android,Change Return Type,Photograph Layer seems broken on Android 11 (despite the adaptations),https://github.com/MarcusWolschon/osmeditor4android/issues/1584,https://github.com/MarcusWolschon/osmeditor4android,https://github.com/MarcusWolschon/osmeditor4android/commit/6c09685ac77540eef0e7cccc285d85e72f55f0cb,src/main/java/de/blau/android/photos/PhotoIndex.java/350-350,Reliability and Stability Improvement,Fix-related,Changing the return type from void to Photo and adding proper database handling ensures that the method correctly returns the photo object while also managing the database connection more
6652bcca5484ec0c9ccd6ec0,61e0ba31696f11f4e4f3ebea9e3d267434ceda12,kitodo-production,Change Return Type,Show corrections messages and comments on hovering over the ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ²KÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ´,https://github.com/kitodo/kitodo-production/issues/4994,https://github.com/kitodo/kitodo-production,https://github.com/kitodo/kitodo-production/commit/61e0ba31696f11f4e4f3ebea9e3d267434ceda12,Kitodo/src/main/java/org/kitodo/production/forms/CurrentTaskForm.java/805-805,Reliability and Stability Improvement,Fix-related,The change in return type from String to List<Comment> is a fix-related improvement aimed at addressing the issue of showing correction messages and comments on hover. This type of refactoring is crucial for enhancing functionality and improving the user experience.
66518a334eb27c185fe55bc5,df0755a4017bece060f44eca3614babcd7f52fa4,zerocode,Change Return Type,Option to retry from a previous step on failure of step,https://github.com/authorjapps/zerocode/issues/623,https://github.com/authorjapps/zerocode,https://github.com/authorjapps/zerocode/commit/df0755a4017bece060f44eca3614babcd7f52fa4,core/src/test/java/org/jsmart/zerocode/core/engine/preprocessor/ZeroCodeAssertionsProcessorImplTest.java/1618-1618,Reliability and Stability Improvement,Fix-related,"this refactoring is indeed primarily Fix-related, addressing the specific issue of enabling step retries on failure. It also has aspects of Maintenance-related refactoring due to the improvements in code structure. The change contributes to Reliability and Stability Improvement by adding a feature that enhances the system's ability to recover from failures."
667715b03cbfb03cd0957529,66ac74ea71e3b1bd522050089db3fea3de7d9831,preesm,Change Return Type,[model] Broadcast/Fork to Fork optimization after flattening is erroneous,https://github.com/preesm/preesm/issues/339,https://github.com/preesm/preesm,https://github.com/preesm/preesm/commit/66ac74ea71e3b1bd522050089db3fea3de7d9831,plugins/org.preesm.model.pisdf/src/org/preesm/model/pisdf/check/RefinementChecker.java/104-104,Reliability and Stability Improvement,Fix-related,Changing the return type from boolean to Boolean and refactoring the method to use doSwitch improves the robustness and flexibility of the checking logic.
6652e80a5484ec0c9ccd96b8,4557c98af3d19e872f35977573007988c7b9e683,bioformats,Change Return Type,Change in CellSens 4.1 causing exception in VSI format reader.,https://github.com/ome/bioformats/issues/4116,https://github.com/ome/bioformats,https://github.com/ome/bioformats/commit/4557c98af3d19e872f35977573007988c7b9e683,components/formats-gpl/src/loci/formats/in/CellSensReader.java/1208-1208,Reliability and Stability Improvement,Fix-related,"Changing the return type to boolean for the parseETSFile method allows the method to indicate whether orphan ETS files were encountered. This refactoring improves the method's ability to communicate its outcome, enhancing error handling and ensuring that the system can respond appropriately to different file conditions."
664e821f7b998c13cdba5479,792fe1eafee8913d522c99d55dfbbc73eb55da36,cryptomator,Change Return Type,Health check: fix all issues,https://github.com/cryptomator/cryptomator/issues/2483,https://github.com/cryptomator/cryptomator,https://github.com/cryptomator/cryptomator/commit/792fe1eafee8913d522c99d55dfbbc73eb55da36,src/main/java/org/cryptomator/ui/health/ResultListCellController.java/181-181,Reliability and Stability Improvement,Maintenance-related,Changing the return type from ObjectBinding<FontAwesome5Icon> to ObservableValue<FontAwesome5Icon> aligns the method with the jfx19 API and possibly provides a more appropriate abstraction for the property.
664d004cc6ae44388495b86e,e6d9d8e26d0660e4e889fd733e2011302360ca6b,NewPipe,Change Return Type,Allow resume of download,https://github.com/TeamNewPipe/NewPipe/issues/345,https://github.com/TeamNewPipe/NewPipe,https://github.com/TeamNewPipe/NewPipe/commit/e6d9d8e26d0660e4e889fd733e2011302360ca6b,app/src/main/java/us/shandian/giga/get/DownloadMission.java/746-746,Reliability and Stability Improvement,Fix-related,"this commit represents a significant Reliability and Stability Improvement effort, focusing on code cleanup, error handling enhancements, and UI optimizations, all of which contribute to a more robust and maintainable download system."
665196494eb27c185fe562a8,a88da4e146d6e1a2fe38bc0c811c42a3bc8ca8e2,dataverse,Change Return Type,Feature Request/Idea: BagIt Support - Add automatic checksum validation on upload,https://github.com/IQSS/dataverse/issues/8608,https://github.com/IQSS/dataverse,https://github.com/IQSS/dataverse/commit/a88da4e146d6e1a2fe38bc0c811c42a3bc8ca8e2,src/main/java/edu/harvard/iq/dataverse/util/FileUtil.java/766-766,Reliability and Stability Improvement,Fix-related,"Changing the return type from List<DataFile> to CreateDataFileResult provides a more structured and detailed response, which can include additional information about the result of the file creation process, such as success status, error messages, or validation results. This refactoring supports better error handling and more comprehensive responses, thereby improving the reliability and stability of the data upload functionality."
664f62147b998c13cdbb6ed5,dc4f8d4cac83fa9926633d6fa7561a0fffec3c95,pmd,Change Variable Type,[core] Can't analyze sources in zip files,https://github.com/pmd/pmd/issues/4248,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/dc4f8d4cac83fa9926633d6fa7561a0fffec3c95,pmd-core/src/main/java/net/sourceforge/pmd/util/datasource/internal/PathDataSource.java/47-47,Reliability and Stability Improvement,Fix-related,"This refactoring demonstrates a comprehensive approach to improving file path handling, especially for zip/jar files."
66771b97cd111b750c4cc421,0ecc8a9586f7e32a24c03e08467d09e752276350,osate2,Change Variable Type,Bound resource allocations analysis report not generated,https://github.com/osate/osate2/issues/2782,https://github.com/osate/osate2,https://github.com/osate/osate2/commit/0ecc8a9586f7e32a24c03e08467d09e752276350,core/org.osate.aadl2.contrib/src/org/osate/aadl2/contrib/memory/MemoryProperties.java/107-107,Reliability and Stability Improvement,Fix-related,Handling the PropertyDoesNotApplyToHolderException in addition to PropertyNotPresentException ensures that the report generation process can continue smoothly without unexpected interruptions. This enhances the reliability and stability of the system by preventing crashes or errors when these specific exceptions are encountered.
6652bcf75484ec0c9ccd6ee4,1c0b787b42146159382c5e6c890e346cc5ecb1cd,kitodo-production,Change Variable Type,Give feedback if script_createDirMeta call fails,https://github.com/kitodo/kitodo-production/issues/3326,https://github.com/kitodo/kitodo-production,https://github.com/kitodo/kitodo-production/commit/1c0b787b42146159382c5e6c890e346cc5ecb1cd,Kitodo/src/main/java/org/kitodo/production/services/command/KitodoScriptService.java/202-202,Reliability and Stability Improvement,Fix-related,"The change involves adding CommandException to the catch block, ensuring that both IOException and CommandException are handled appropriately. This refactoring is fix-related, as it directly addresses the need to catch and report additional types of exceptions, thereby improving the error handling mechanism and making the system more robust."
6652b2724eb27c185fe6cd2d,5280f0c5e4925fa3dd200ea71bda640b34f6c1c1,sdl_java_suite,Change Variable Type,Nearby Devices permission on Android 12 and Above,https://github.com/smartdevicelink/sdl_java_suite/issues/1839,https://github.com/smartdevicelink/sdl_java_suite,https://github.com/smartdevicelink/sdl_java_suite/commit/5280f0c5e4925fa3dd200ea71bda640b34f6c1c1,android/sdl_android/src/main/java/com/smartdevicelink/transport/SdlBroadcastReceiver.java/306-306,Reliability and Stability Improvement,Fix-related,"Changing the variable type from String to ComponentName provides a more specific and appropriate type for handling the router service, improving the accuracy and robustness of the code."
6653019e5484ec0c9ccdb494,4f00fe349e0f12dcadf53d3465ee5e4fe92d11b2,SORMAS-Project,Change Variable Type,Entities read-only can be soft deleted from API [1],https://github.com/SORMAS-Foundation/SORMAS-Project/issues/11319,https://github.com/SORMAS-Foundation/SORMAS-Project,https://github.com/SORMAS-Foundation/SORMAS-Project/commit/4f00fe349e0f12dcadf53d3465ee5e4fe92d11b2,sormas-backend/src/main/java/de/symeda/sormas/backend/caze/CaseFacadeEjb.java/2617-2617,Reliability and Stability Improvement,Fix-related,dding AccessDeniedException to the catch block ensures that cases where deletion is not permitted due to access restrictions are properly handled and logged.
664f73657b998c13cdbb85d9,71bc85737bcd310ef4ad93bea44a7b885002a6f5,rstudio,Change Variable Type,Background session's Help pane remains unchanged on switch between light to dark themes,https://github.com/rstudio/rstudio/issues/2583,https://github.com/rstudio/rstudio,https://github.com/rstudio/rstudio/commit/71bc85737bcd310ef4ad93bea44a7b885002a6f5,src/gwt/src/org/rstudio/core/client/HtmlMessageListener.java/128-128,Reliability and Stability Improvement,Fix-related,"Changing the variable type from String to AceTheme enhances type safety and clarity. This refactoring ensures that theme-related properties are handled more appropriately, reducing the risk of errors and improving code reliability."
664cf657c6ae44388495b42c,63a4e30ae637100902848999dc0c7219af1e8cd4,nacos,Change Variable Type,Issue with executing shell script /bin/sh^M on Unix/Linux,https://github.com/alibaba/nacos/issues/3370,https://github.com/alibaba/nacos,https://github.com/alibaba/nacos/commit/63a4e30ae637100902848999dc0c7219af1e8cd4,client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java/476-476,Reliability and Stability Improvement,Maintenance-related,broaden exception handling could potentially improve reliability in network operations.
665140164eb27c185fe4cfa9,0d652b915348c802a98b6caebf06f056ed5550d6,sdrtrunk,Change Variable Type,Add Support for RTL2832 With R828D Tuner (aka rtl-sdr V4 dongle),https://github.com/DSheirer/sdrtrunk/issues/1643,https://github.com/DSheirer/sdrtrunk,https://github.com/DSheirer/sdrtrunk/commit/0d652b915348c802a98b6caebf06f056ed5550d6,src/main/java/io/github/dsheirer/source/tuner/rtl/r8x/R8xEmbeddedTuner.java/88-88,Reliability and Stability Improvement,Maintenance-related," indicates support for RTL2832 dongles with embedded R828D tuners and introduces Bias-T support. This suggests an enhancement in the hardware compatibility and functionality, making the software more robust in handling various hardware configurations."
66531dd45484ec0c9ccdcc19,e04ba7785e9ba0130f6cfa540bb973366f6c890b,QuranApp,Change Variable Type,Media buttons support and auto-pause on headphones disconnect,https://github.com/AlfaazPlus/QuranApp/issues/221,https://github.com/AlfaazPlus/QuranApp,https://github.com/AlfaazPlus/QuranApp/commit/e04ba7785e9ba0130f6cfa540bb973366f6c890b,app/src/main/java/com/quranapp/android/activities/ActivityReader.java/1190-1190,Reliability and Stability Improvement,Maintenance-related,Changing the variable type from individual strings and booleans to a more structured RecitationPlayerParams object improves the reliability and stability of the code.
664f00027b998c13cdbada8e,928e2280d28306680169d6e50f14cf34e6f72ab4,processing,Change Variable Type,Modes can't be updated,https://github.com/processing/processing/issues/2579,https://github.com/processing/processing,https://github.com/processing/processing/commit/928e2280d28306680169d6e50f14cf34e6f72ab4,app/src/processing/app/contrib/ToolContribution.java/79-79,Reliability and Stability Improvement,Maintenance-related,"the code changes shown don't directly address the issue of modes not being updatable, the commit message suggests broader improvements, including handling of auto-updates in offline scenarios."
6652be645484ec0c9ccd7439,756acb71135a4c1c941c1b9ec208e2ddbf89598d,lisa,Change Variable Type,[BUG] Assigning to a bottom state should not change the state,https://github.com/lisa-analyzer/lisa/issues/86,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/756acb71135a4c1c941c1b9ec208e2ddbf89598d,lisa/src/test/java/it/unive/lisa/program/cfg/SemanticsSanityTest.java/311-311,Reliability and Stability Improvement,Maintenance-related,this change falls under the Reliability and Stability Improvement category. It addresses a reported bug (although the specific fix isn't visible in this snippet) and significantly improves the code's flexibility and error handling.
664ce94bc6ae44388495990c,9fe70d3828365541f5eb6d51e3b053d16eacbcea,ghidra,Change Variable Type,OMF loader reads wrong data from file.,https://github.com/NationalSecurityAgency/ghidra/issues/4777,https://github.com/NationalSecurityAgency/ghidra,https://github.com/NationalSecurityAgency/ghidra/commit/9fe70d3828365541f5eb6d51e3b053d16eacbcea,Ghidra/Features/Base/src/main/java/ghidra/app/util/opinion/OmfLoader.java/204-204,Reliability and Stability Improvement,Maintenance-related,Changing the variable type from OmfFixupRecord.FixupSubrecord to a more generalized Subrecord and improving how subrecords are processed makes the code more robust and adaptable.
6652b0664eb27c185fe6c733,6050d9309f850eebeedb85a76d341635d14e9408,cucumber-eclipse,Change Variable Type,"Allow multiple packages in the option ""Only match steps from specific package and sub-packages""",https://github.com/cucumber/cucumber-eclipse/issues/302,https://github.com/cucumber/cucumber-eclipse,https://github.com/cucumber/cucumber-eclipse/commit/6050d9309f850eebeedb85a76d341635d14e9408,cucumber.eclipse.steps.integration/src/main/java/cucumber/eclipse/steps/integration/Step.java/39-39,Reliability and Stability Improvement,Maintenance-related,"Changing the exception type caught from UndefinedParameterTypeException to CucumberExpressionException broadens the scope of exceptions handled, ensuring that various types of expression-related exceptions are managed appropriately."
665308105484ec0c9ccdbc97,51bffe754553edb35c875e03acce5a87c1d9d7c0,megamek,Extract Method,[49.15] Hang on use of RAC/5 when insufficient ammo is available,https://github.com/MegaMek/megamek/issues/4861,https://github.com/MegaMek/megamek,https://github.com/MegaMek/megamek/commit/51bffe754553edb35c875e03acce5a87c1d9d7c0,megamek/src/megamek/common/weapons/UltraWeaponHandler.java/81-88,Reliability and Stability Improvement,Fix-related,"issue related to the use of RAC/5 when insufficient ammo is available. By fixing the hanging problem, the reliability and stability of the game are improved. The refactoring type ""Extract Method"" is correctly identified and plays a role in this change. However, the primary importance of this change is that it's fix-related, aimed at resolving a game-breaking bug."
66518a1d4eb27c185fe55b9c,c5c01725241eb71d5fdb7b14943e5e6899c743b7,zerocode,Extract Method,initialPollWaitingForConsumerGroupJoin time should be configurable,https://github.com/authorjapps/zerocode/issues/462,https://github.com/authorjapps/zerocode,https://github.com/authorjapps/zerocode/commit/c5c01725241eb71d5fdb7b14943e5e6899c743b7,core/src/main/java/org/jsmart/zerocode/core/kafka/helper/KafkaConsumerHelper.java/82-100,Reliability and Stability Improvement,Fix-related,"this change falls under  Reliability and Stability Improvement categories. It addresses the reported issue by making the polling time configurable, which can lead to both performance improvements and increased reliability in various operating environments. The ability to fine-tune this parameter allows users to optimize their Kafka consumer behavior for different scenarios, potentially leading to better resource utilization and more stable consumer group management."
664cf16ac6ae44388495a7d7,237ad5590666f641db5762c599be7c7edbfd0645,glide,Extract Method,Glide in Fragment error: recursive entry to executePendingTransactions,https://github.com/bumptech/glide/issues/117,https://github.com/bumptech/glide,https://github.com/bumptech/glide/commit/237ad5590666f641db5762c599be7c7edbfd0645,library/src/main/java/com/bumptech/glide/manager/RequestManagerRetriever.java/69-84,Reliability and Stability Improvement,Fix-related,"Extracting the method getApplicationManager improves code modularity and readability. By isolating the logic for obtaining the application manager, the code becomes cleaner and the potential for errors related to fragment transactions is reduced."
664e820b7b998c13cdba545d,0f56d424da63aee65ed9349ea2cd86739601f9ff,cryptomator,Extract Method,Cryptomator does not remember autostart setting,https://github.com/cryptomator/cryptomator/issues/1251,https://github.com/cryptomator/cryptomator,https://github.com/cryptomator/cryptomator/commit/0f56d424da63aee65ed9349ea2cd86739601f9ff,main/ui/src/main/java/org/cryptomator/ui/preferences/AutoStartWinStrategy.java/55-68,Reliability and Stability Improvement,Fix-related,"Extracting the methods isAutoStartEnabledOverRegistry and isAutoStartEnabledOverFolder from the isAutoStartEnabled method modularizes the code, making it cleaner and easier to manage. This refactoring addresses specific issues with the autostart functionality, ensuring that both registry and folder-based autostart settings are correctly handled and checked."
665184f44eb27c185fe54ce1,bc06c90cbd252183200e08aa5f948a7df1df0708,MultiThreadDownload,Extract Method,How to resume a download,https://github.com/Aspsine/MultiThreadDownload/issues/34,https://github.com/Aspsine/MultiThreadDownload,https://github.com/Aspsine/MultiThreadDownload/commit/bc06c90cbd252183200e08aa5f948a7df1df0708,app/src/main/java/com/aspsine/multithreaddownload/demo/service/DownloadService.java/255-261,Reliability and Stability Improvement,Fix-related,"Changing the attribute type and refactoring the onFailed method to improve error handling and notification updating ensures that the download process handles failures more gracefully. By adding methods updateNotification and sendBroadCast, the code becomes more modular and easier to maintain."
664f61f17b998c13cdbb6eba,c48f407e28094c8c0d3fe19207cc1305dd001df0,pmd,Extract Method,[java] StringToString can not detect the case: getStringMethod().toString(),https://github.com/pmd/pmd/issues/2530,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/c48f407e28094c8c0d3fe19207cc1305dd001df0,pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/StringToStringRule.java/285-292,Reliability and Stability Improvement,Fix-related,"Extracting methods as part of the fix makes the code more modular and easier to maintain. By breaking down complex logic into smaller methods, the code becomes clearer and less error-prone."
6652bc875484ec0c9ccd6df0,8951c6547ec5d1864c4ce41cd63a82a794852067,transformer,Extract Method,Command line updates: Allow rules to be specified multiple times.,https://github.com/eclipse/transformer/issues/85,https://github.com/eclipse/transformer,https://github.com/eclipse/transformer/commit/8951c6547ec5d1864c4ce41cd63a82a794852067,org.eclipse.transformer/src/main/java/org/eclipse/transformer/Transformer.java/117-133,Reliability and Stability Improvement,Maintenance-related,Extracting a new constructor in the OptionSettings class to handle different configurations for command line options improves the reliability and stability of the command line parsing functionality.
665185974eb27c185fe54dea,143cd5f0b10f39a8dda8f4b9c47d8614c11b9446,eo,Extract Method,Split `OptimizeMojo` into two parts,https://github.com/objectionary/eo/issues/2577,https://github.com/objectionary/eo,https://github.com/objectionary/eo/commit/143cd5f0b10f39a8dda8f4b9c47d8614c11b9446,eo-maven-plugin/src/main/java/org/eolang/maven/optimization/OptSpy.java/58-65,Reliability and Stability Improvement,Maintenance-related,"The refactoring involves splitting the constructor logic in the OptSpy class into two separate constructors, enhancing the flexibility and robustness of the class. This change does not directly impact performance metrics such as execution time, memory usage, or other performance aspects, but it improves the stability and reliability of object creation."
664f38b67b998c13cdbb269b,baf9003923057506e2518c688bc1e5d09d5052d6,javaparser,Extract Method,Incorrect source code positions in standards-complient unicode escaping mode,https://github.com/javaparser/javaparser/issues/2270,https://github.com/javaparser/javaparser,https://github.com/javaparser/javaparser/commit/baf9003923057506e2518c688bc1e5d09d5052d6,javaparser-core/src/main/java/com/github/javaparser/UnicodeEscapeProcessingProvider.java/141-144,Reliability and Stability Improvement,Maintenance-related,"this change doesn't directly optimize performance, it significantly improves the reliability and stability of the system by:  Ensuring correct source code positions are maintained, which is crucial for accurate error reporting and debugging."
66517dce4eb27c185fe54a1f,83aa84ca3bd9bb04550683452a87fbd480569472,Slimefun4,Extract Method,Automated Crafting Chamber ignores crafting-permissions,https://github.com/Slimefun/Slimefun4/issues/1161,https://github.com/Slimefun/Slimefun4,https://github.com/Slimefun/Slimefun4/commit/83aa84ca3bd9bb04550683452a87fbd480569472,src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/machines/auto_crafters/EnhancedRecipe.java/39-49,Reliability and Stability Improvement,Maintenance-related,"his refactoring doesn't directly address the issue with crafting permissions in the Automated Crafting Chamber, improved code structure can indirectly contribute to solving such issues by making the code easier to debug and modify."
664d002bc6ae44388495b7ca,160a33e8c844a7aa7534fe798a3472a015315480,NewPipe,Extract Method,Allow resume of download,https://github.com/TeamNewPipe/NewPipe/issues/345,https://github.com/TeamNewPipe/NewPipe,https://github.com/TeamNewPipe/NewPipe/commit/160a33e8c844a7aa7534fe798a3472a015315480,app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java/285-297,Reliability and Stability Improvement,Maintenance-related,Extracting the disconnect method from the interrupt method improves code readability and modularity.
6652acca4eb27c185fe6bf15,ef0d6a8a77ea53db28d0d265192c23bf148a374a,stroom,Extract Method,Local Explorer tree cache is not refreshed when a create/delete occurs on another node,https://github.com/gchq/stroom/issues/3228,https://github.com/gchq/stroom,https://github.com/gchq/stroom/commit/ef0d6a8a77ea53db28d0d265192c23bf148a374a,stroom-explorer/stroom-explorer-impl/src/main/java/stroom/explorer/impl/ExplorerNodeServiceImpl.java/76-108,Reliability and Stability Improvement,Maintenance-related,"Extracting the method to include an additional Set<String> parameter for tags allows for more flexible and modular handling of node creation. This refactoring ensures that the node creation logic is reusable and easier to maintain, improving code clarity and robustness."
664f390b7b998c13cdbb26f2,797bf53670027d7152a6d0f65ad6c984e19c1924,javaparser,Extract Method,Further improve correction of whitespace during difference application,https://github.com/javaparser/javaparser/issues/1638,https://github.com/javaparser/javaparser,https://github.com/javaparser/javaparser/commit/797bf53670027d7152a6d0f65ad6c984e19c1924,javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/Difference.java/319-337,Reliability and Stability Improvement,Maintenance-related,"Extracting the method into a separate groupConsecutiveRemovedElements method enhances the modularity and readability of the code. By breaking down the logic into smaller, well-defined methods, the code becomes easier to understand, test, and maintain."
664f65a77b998c13cdbb78e7,0726bdff7edaace99ebab921f74c822deeba01dc,bisq,Extract Method,ERROR: Deposit transaction ID N/A,https://github.com/bisq-network/bisq/issues/6205,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/0726bdff7edaace99ebab921f74c822deeba01dc,desktop/src/main/java/bisq/desktop/app/BisqApp.java/379-409,Reliability and Stability Improvement,Fix-related,Extracting methods for checking trades (shutDownByUserCheckTrades) and offers (shutDownByUserCheckOffers) improves code modularity and clarity. These refactorings ensure that the shutdown process is more robust and that all necessary checks are performed before proceeding.
6652e5935484ec0c9ccd9263,1f793c1e68df8b4b4c22cbd2468b80eea3b98cd7,Ice_and_Fire,Extract Method,mermex's code has more bugs than their HIVE!,https://github.com/AlexModGuy/Ice_and_Fire/issues/3690,https://github.com/AlexModGuy/Ice_and_Fire,https://github.com/AlexModGuy/Ice_and_Fire/commit/1f793c1e68df8b4b4c22cbd2468b80eea3b98cd7,src/main/java/com/github/alexthe666/iceandfire/entity/ai/MyrmexAIForage.java/165-176,Reliability and Stability Improvement,Fix-related,"the extraction of a method could be part of the bug-fixing process or the implementation of the new AiDebuger, its importance is secondary to the overall goal of fixing issues and improving debugging capabilities."
6652be285484ec0c9ccd7230,0e93a90c0948041a5a44e401914333a315ced336,lisa,Move Class,[BUG] Enforce ordering in string representations of abstract states,https://github.com/lisa-analyzer/lisa/issues/46,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/0e93a90c0948041a5a44e401914333a315ced336,lisa/src/test/java/it/unive/lisa/test/cfg/CFGSimplificationTest.java/110-124,Reliability and Stability Improvement,Test-related,Moving a class to a more appropriate package or module can improve the organization and maintainability of the code.
664f61ec7b998c13cdbb6e91,32a8c042e37782dbb278c82b51095925067e0bcc,pmd,Rename Method,[java] StringToString can not detect the case: getStringMethod().toString(),https://github.com/pmd/pmd/issues/2530,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/32a8c042e37782dbb278c82b51095925067e0bcc,pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/StringToStringRule.java/299-306,Reliability and Stability Improvement,Fix-related,"his refactoring is primarily about improving the correctness and robustness of the code. While it may have some minor performance implications (e.g., the new implementation might be slightly slower due to additional null checks and type conversions), the main goal is clearly to fix a bug and improve stability rather than to optimize performance."
6652acc74eb27c185fe6beec,3e9e6d43b215e58a2ea926efa012de3327b0d370,stroom,Rename Method,Local Explorer tree cache is not refreshed when a create/delete occurs on another node,https://github.com/gchq/stroom/issues/3228,https://github.com/gchq/stroom,https://github.com/gchq/stroom/commit/3e9e6d43b215e58a2ea926efa012de3327b0d370,stroom-core-shared/src/main/java/stroom/explorer/shared/ExplorerNode.java/221-226,Reliability and Stability Improvement,Maintenance-related,Renaming methods as part of this refactoring enhances code clarity and maintainability.
6651858e4eb27c185fe54de6,4e91361f6f1a23cf874766a74177493f6e5813c2,eo,Rename Method,OptCached doesn't take into account the date of the source,https://github.com/objectionary/eo/issues/2713,https://github.com/objectionary/eo,https://github.com/objectionary/eo/commit/4e91361f6f1a23cf874766a74177493f6e5813c2,eo-maven-plugin/src/test/java/org/eolang/maven/optimization/OptCachedTest.java/47-56,Reliability and Stability Improvement,Test-related,"Renaming methods as part of this refactoring helps improve code clarity and consistency. Clear and descriptive method names make the code easier to understand, navigate, and maintain."
667714643cbfb03cd0957162,ddc2277bbf0b3e40f2948a787403d7b6fd5c2aea,zeebe-kafka-exporter,Rename Variable,Logic Checks Missing in Zeebe/Kafka Exporter Code Flow Causing Kafka Exporter to Fail,https://github.com/camunda-community-hub/zeebe-kafka-exporter/issues/27,https://github.com/camunda-community-hub/zeebe-kafka-exporter,https://github.com/camunda-community-hub/zeebe-kafka-exporter/commit/ddc2277bbf0b3e40f2948a787403d7b6fd5c2aea,exporter/src/main/java/io/zeebe/exporters/kafka/KafkaExporter.java/159-159,Reliability and Stability Improvement,Fix-related,"This refactoring is directly related to fixing and enhancing the system's reliability and fault tolerance.  It ensures that the exporter can recover from errors, retry operations as needed, and maintain its functionality without heavy dependency on Elastic"
664d003ec6ae44388495b835,86dafdd92b200e295494e335d024f99d950af6cb,NewPipe,Rename Variable,Allow resume of download,https://github.com/TeamNewPipe/NewPipe/issues/345,https://github.com/TeamNewPipe/NewPipe,https://github.com/TeamNewPipe/NewPipe/commit/86dafdd92b200e295494e335d024f99d950af6cb,app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java/791-793,Reliability and Stability Improvement,Maintenance-related,The variable renaming from secondaryStream to secondary is part of code cleanup efforts.
6652e7fc5484ec0c9ccd96b0,f1bed8a64e4aa3d0542b0b02318573e7873aacb4,bioformats,Rename Variable,JPEG: IndexOutOfBoundsException ,https://github.com/ome/bioformats/issues/3616,https://github.com/ome/bioformats,https://github.com/ome/bioformats/commit/f1bed8a64e4aa3d0542b0b02318573e7873aacb4,components/formats-bsd/src/loci/formats/services/JPEGTurboServiceImpl.java/457-457,Reliability and Stability Improvement,Maintenance-related,fix for an IndexOutOfBoundsException when parsing the sampling factor in JPEG files. Addressing such exceptions improves the reliability and stability of the software by preventing crashes or erroneous behavior during JPEG processing.
6677285bcd111b750c4cd5ee,09483910f580a9d17f78ba6c72b3dc9c0283064d,re3gistry,Rename Variable,"Installation (from scratch, no migration) gives ""no user found""",https://github.com/ec-jrc/re3gistry/issues/78,https://github.com/ec-jrc/re3gistry,https://github.com/ec-jrc/re3gistry/commit/09483910f580a9d17f78ba6c72b3dc9c0283064d,sources/Re3gistry2/src/main/java/eu/europa/ec/re3gistry2/web/controller/Install.java/187-187,Reliability and Stability Improvement,Maintenance-related,"Renaming the variable from systemInstalledFile to systemInstallingFile improves code readability and clarity, making the code easier to understand and maintain."
6652f5975484ec0c9ccda164,a8fb86a493319beaf55bc918d436a2b6e3add1fb,rdf4j,Rename Variable,Support for merge join and ordered indexes,https://github.com/eclipse-rdf4j/rdf4j/issues/4819,https://github.com/eclipse-rdf4j/rdf4j,https://github.com/eclipse-rdf4j/rdf4j/commit/a8fb86a493319beaf55bc918d436a2b6e3add1fb,core/queryalgebra/evaluation/src/main/java/org/eclipse/rdf4j/query/algebra/evaluation/optimizer/QueryJoinOptimizer.java/281-281,Reliability and Stability Improvement,Maintenance-related,Renaming variables to improve code readability can indirectly support performance optimization efforts by making the code easier to understand and maintain.
664f2e677b998c13cdbb1ab4,658ff7c852c49d3b892cc2895370074cf5893e00,btrace,Rename Variable,java.lang.VerifyError: Bad return type,https://github.com/btraceio/btrace/issues/160,https://github.com/btraceio/btrace,https://github.com/btraceio/btrace/commit/658ff7c852c49d3b892cc2895370074cf5893e00,src/share/classes/com/sun/btrace/runtime/ClassFilter.java/213-213,Reliability and Stability Improvement,Maintenance-related,"Renaming the variable and the utility class from NamedValue to NamedString (and removing generics) addresses a specific type-related error. This refactoring clarifies the class's purpose and ensures type safety, which directly contributes to resolving the VerifyError and improving the application's stability."
664f3c0e7b998c13cdbb2fbb,256b16b269afdb37a0c465e66f5425380db6de4e,AmazeFileManager,Rename Variable,SCP/SFTP with password authentication does not work correctly,https://github.com/TeamAmaze/AmazeFileManager/issues/2843,https://github.com/TeamAmaze/AmazeFileManager,https://github.com/TeamAmaze/AmazeFileManager/commit/256b16b269afdb37a0c465e66f5425380db6de4e,app/src/main/java/com/amaze/filemanager/filesystem/ssh/SshClientUtils.java/243-243,Reliability and Stability Improvement,Maintenance-related,"Renaming a variable as part of this enhancement helps improve code clarity and readability, ensuring that the purpose of the variable is clear and that the code can be easily understood and maintained."
66513e2d4eb27c185fe4cd64,efbfbb7f31a308c63837cffc922726883af66545,siddhi,Add Method Annotation,Throw an exception if transport property is mapped to a non-string attribute,https://github.com/siddhi-io/siddhi/issues/1557,https://github.com/siddhi-io/siddhi,https://github.com/siddhi-io/siddhi/commit/efbfbb7f31a308c63837cffc922726883af66545,modules/siddhi-core/src/main/java/io/siddhi/core/stream/input/source/SourceEventListener.java/33-33,Reliability and Stability Improvement,Maintenance-related,Adding the @Deprecated annotation to the method serves as a clear indicator to developers that this method is outdated and should be replaced with a newer implementation.
6652e7c75484ec0c9ccd94b7,94c6ce5522465ee37160ea6f3126ad7fd371cea9,glassfish,Add Method Annotation,Message catalog key not transformed: using.default.ds,https://github.com/eclipse-ee4j/glassfish/issues/23873,https://github.com/eclipse-ee4j/glassfish,https://github.com/eclipse-ee4j/glassfish/commit/94c6ce5522465ee37160ea6f3126ad7fd371cea9,appserver/orb/orb-connector/src/main/java/org/glassfish/enterprise/iiop/util/S1ASThreadPoolManager.java/229-229,Reliability and Stability Improvement,Maintenance-related,"Adding the @Override annotation improves code clarity and maintainability by explicitly indicating the intention to override a method. This helps prevent potential errors if the method signature in the superclass or interface changes, as the compiler will catch mismatches."
664d2b1cc6ae44388495f143,1fd449cddcdc81c76ecd96df491503f9ad315b37,skywalking,Add Method Annotation,Topology ui Service SLA show error,https://github.com/apache/skywalking/issues/4273,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/1fd449cddcdc81c76ecd96df491503f9ad315b37,apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/context/TracingContext.java/46-46,Reliability and Stability Improvement,Maintenance-related,"Adding comprehensive logic to the inject method, including type checks and setting various attributes on the ContextCarrier, improves code robustness and correctness. The use of the @Override annotation ensures that the method signature matches the method in the superclass, further enhancing code reliability."
664f2ed97b998c13cdbb1b37,97c2259656d638f72a10266c488a2a8bd63ff7cd,vavr,Add Method Annotation,NPE thrown while combining Stream.groupBy with Map.map,https://github.com/vavr-io/vavr/issues/503,https://github.com/vavr-io/vavr,https://github.com/vavr-io/vavr/commit/97c2259656d638f72a10266c488a2a8bd63ff7cd,src/main/java/javaslang/collection/HashSet.java/484-484,Reliability and Stability Improvement,Maintenance-related,"The addition of the @SuppressWarnings annotation is a maintenance-related change. It helps maintain cleaner and more readable code by suppressing specific warnings that are already handled correctly, preventing clutter in the codebase."
664e81fb7b998c13cdba5431,0bdfb7c9f9a8551d4b104466721aedd9faf53395,cryptomator,Add Parameter,Removing the vault from the vault list while it is still being unlocked does not cancel the unlocking process,https://github.com/cryptomator/cryptomator/issues/1478,https://github.com/cryptomator/cryptomator,https://github.com/cryptomator/cryptomator/commit/0bdfb7c9f9a8551d4b104466721aedd9faf53395,main/ui/src/main/java/org/cryptomator/ui/mainwindow/VaultListController.java/58-58,Reliability and Stability Improvement,Maintenance-related,"it represents a significant improvement in the reliability and stability of the vault management system. By enhancing state management, improving keychain integration, and providing more granular control over vault operations, these changes contribute to a more robust and user-friendly system."
667727becd111b750c4cd505,969eebb6e6aaa1179dda872be814d464a9a77a89,extension-springcloud,Move Class,The blackListedServiceInstances in SpringCloudCommandRouter should be reevaluated from time to time,https://github.com/AxonFramework/extension-springcloud/issues/6,https://github.com/AxonFramework/extension-springcloud,https://github.com/AxonFramework/extension-springcloud/commit/969eebb6e6aaa1179dda872be814d464a9a77a89,springcloud/src/main/java/org/axonframework/extensions/springcloud/commandhandling/mode/RestCapabilityDiscoveryMode.java/44-211,Reliability and Stability Improvement,Maintenance-related,Move class as aresult of package renaming
6652be665484ec0c9ccd743f,af5ee37e1056d10a1f8db428f6412de947c10c6c,lisa,Move Class,[BUG] Assigning to a bottom state should not change the state,https://github.com/lisa-analyzer/lisa/issues/86,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/af5ee37e1056d10a1f8db428f6412de947c10c6c,lisa/src/main/java/it/unive/lisa/analysis/nonrelational/inference/BaseInferredValue.java/23-599,Reliability and Stability Improvement,Maintenance-related,"Moving classes to their appropriate packages helps maintain a clean architecture, reducing the chances of bugs and errors. It also aids in isolating and testing specific parts of the code, ensuring that changes or additions to the codebase do not inadvertently introduce new issues."
667715943cbfb03cd0957505,16846d7c19c6fba837466fcd92d26c978f6b1683,preesm,Add Method Annotation,[model] Broadcast/Fork to Fork optimization after flattening is erroneous,https://github.com/preesm/preesm/issues/339,https://github.com/preesm/preesm,https://github.com/preesm/preesm/commit/16846d7c19c6fba837466fcd92d26c978f6b1683,plugins/org.preesm.ui.pisdf/src/org/preesm/ui/pisdf/popup/actions/PiSDFFlatComputePopup.java/55-55,Reliability and Stability Improvement,Maintenance-related,The refactoring involves adding a method annotation and possibly restructuring the logic within the processPiSDF method. This refactoring enhances the maintainability and readability of the code by introducing annotations and possibly improving the method's design.
664cff8ec6ae44388495b752,0d51eefbb9385883d2ebd3739fad38e72db26866,NewPipe,Add Parameter,Better handling of ExoPlayer/unrecoverable player errors,https://github.com/TeamNewPipe/NewPipe/issues/7008,https://github.com/TeamNewPipe/NewPipe,https://github.com/TeamNewPipe/NewPipe/commit/0d51eefbb9385883d2ebd3739fad38e72db26866,app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailPlayerCrasher.java/88-88,Reliability and Stability Improvement,Maintenance-related,"Adding the Context parameter to the getThemeWrapperContext method improves the method's flexibility by allowing it to accept any context, not just the one associated with the current instance."
6652d8635484ec0c9ccd866b,a6fbe96f73a2afccdb54e4b6861e1a843c7307b5,vassal,Add Parameter,Editor search Advanced option filters are still in effect when Advanced is unchecked,https://github.com/vassalengine/vassal/issues/12800,https://github.com/vassalengine/vassal,https://github.com/vassalengine/vassal/commit/a6fbe96f73a2afccdb54e4b6861e1a843c7307b5,vassal-app/src/main/java/VASSAL/configure/ConfigureTree.java/2570-2570,Reliability and Stability Improvement,Maintenance-related,Adding the Pattern regexP parameter to the showConfigurableHitList method makes the method more flexible and allows for more consistent parameter passing. T
6652d7fe5484ec0c9ccd8549,25020b956a5d58e02f8a1426d915b1cf2e63a91f,Android-nRF-Mesh-Library,Change Parameter Type,Nodes have all the same unicastaddress,https://github.com/NordicSemiconductor/Android-nRF-Mesh-Library/issues/320,https://github.com/NordicSemiconductor/Android-nRF-Mesh-Library,https://github.com/NordicSemiconductor/Android-nRF-Mesh-Library/commit/25020b956a5d58e02f8a1426d915b1cf2e63a91f,app/src/main/java/no/nordicsemi/android/nrfmesh/node/adapter/NodeAdapter.java/53-53,Reliability and Stability Improvement,Maintenance-related,"this change doesn't directly target performance optimization, it's worth noting that such maintenance activities are crucial for the long-term health of a codebase. Clean, well-organized code is often easier to optimize and maintain in the future."
6677157f3cbfb03cd09574d5,f8da995d5d651d2cf4c7b937715274d3267405c7,preesm,Add Method Annotation,[model] Broadcast/Fork to Fork optimization after flattening is erroneous,https://github.com/preesm/preesm/issues/339,https://github.com/preesm/preesm,https://github.com/preesm/preesm/commit/f8da995d5d651d2cf4c7b937715274d3267405c7,plugins/org.preesm.algorithm/src/org/preesm/algorithm/schedule/fpga/FifoEvaluatorAsArray.java/24-24,Scalability Improvement,Fix-related,"Adding the @Override annotation helps ensure that the method is correctly implemented, potentially leading to better-managed resources and more predictable behavior in large-scale systems."
6652bbd25484ec0c9ccd6c6b,c9ac4c3812ca0827e6104c11b1c87ad470a1a9c7,SukakuExplainer,Add Parameter,Move cell values and potentials to grid,https://github.com/SudokuMonster/SukakuExplainer/issues/26,https://github.com/SudokuMonster/SukakuExplainer,https://github.com/SudokuMonster/SukakuExplainer/commit/c9ac4c3812ca0827e6104c11b1c87ad470a1a9c7,diuf/sudoku/generator/Generator.java/34-34,Scalability Improvement,Fix-related,"Adding parameters to methods can improve the configurability and flexibility of the code, allowing it to handle a wider range of scenarios and data sizes more effectively. This refactoring helps in scaling the operations by providing more options for customization and optimization."
66773f45cd111b750c4cf2da,b3ad3b2ee8b4218d319ece0af43af19fdee29a52,Biomancy,Change Attribute Type,Energy problem in chewer/digester cycle.,https://github.com/Elenterius/Biomancy/issues/8,https://github.com/Elenterius/Biomancy,https://github.com/Elenterius/Biomancy/commit/b3ad3b2ee8b4218d319ece0af43af19fdee29a52,src/main/java/com/github/elenterius/biomancy/inventory/DigesterContainer.java/20-20,Scalability Improvement,Fix-related,The refactoring involves changing the attribute type and making all bio-machines capable of using fluid biofuel. The introduction of SimpleInventory for handling empty buckets as part of this refactoring supports better scalability by managing resources more efficiently.
6652b06f4eb27c185fe6c749,084fff247274cc533e1231048620b398eb5847a6,cucumber-eclipse,Change Attribute Type,"Allow multiple packages in the option ""Only match steps from specific package and sub-packages""",https://github.com/cucumber/cucumber-eclipse/issues/302,https://github.com/cucumber/cucumber-eclipse,https://github.com/cucumber/cucumber-eclipse/commit/084fff247274cc533e1231048620b398eb5847a6,cucumber.eclipse.steps.jdt/src/main/java/cucumber/eclipse/steps/jdt/StepDefinitions.java/67-67,Scalability Improvement,Fix-related,"Changing the attribute type from StepDefinitionsStorage to StepDefinitionsRepository and using a singleton instance (StepDefinitionsRepository.INSTANCE) can enhance the scalability of the application. This change centralizes the management of step definitions, potentially reducing redundant instances and improving resource utilization as the application scales."
6652f4785484ec0c9ccd9e67,16b10b8f7dba04f0ef7d69ab1679d1b987c6681b,rdf4j,Change Parameter Type,Implement alternative embedded persistent backend,https://github.com/eclipse-rdf4j/rdf4j/issues/3416,https://github.com/eclipse-rdf4j/rdf4j,https://github.com/eclipse-rdf4j/rdf4j/commit/16b10b8f7dba04f0ef7d69ab1679d1b987c6681b,core/sail/lmdb/src/main/java/org/eclipse/rdf4j/sail/lmdb/model/LmdbLiteral.java/71-71,Scalability Improvement,Fix-related,"This refactoring directly impacts performance by optimizing how IDs are stored and managed, aiming to handle larger values more efficiently, fundamentally improving the system's capacity to handle growth, which is a key aspect of performance for large-scale or long-running systems."
66772a82cd111b750c4cdc5f,c285e1051406c83e34b80ce8a40f9c159e3fb10c,txtUML,Change Parameter Type,Separate model execution,https://github.com/ELTE-Soft/txtUML/issues/255,https://github.com/ELTE-Soft/txtUML,https://github.com/ELTE-Soft/txtUML/commit/c285e1051406c83e34b80ce8a40f9c159e3fb10c,dev/plugins/hu.elte.txtuml.api.model.execution/src/hu/elte/txtuml/api/model/execution/TraceListener.java/16-16,Scalability Improvement,Fix-related,"Changing the parameter type to a more specific or appropriate type, as part of the broader refactoring effort, helps in improving the clarity and functionality of the code. By refining how signals are processed and improving the connection to the execution engine, the system becomes more efficient and capable of handling larger and more complex models."
667727f1cd111b750c4cd57e,178751bdb69c34ada5d2e5f9187abc3b3894c17b,extension-springcloud,Change Variable Type,The blackListedServiceInstances in SpringCloudCommandRouter should be reevaluated from time to time,https://github.com/AxonFramework/extension-springcloud/issues/6,https://github.com/AxonFramework/extension-springcloud,https://github.com/AxonFramework/extension-springcloud/commit/178751bdb69c34ada5d2e5f9187abc3b3894c17b,springcloud/src/test/java/org/axonframework/extensions/springcloud/commandhandling/mode/RestCapabilityDiscoveryModeTest.java/66-66,Scalability Improvement,Fix-related,"Changing the variable type from MemberCapabilities to SerializedMemberCapabilities suggests an optimization for the serialization process. This adjustment aims to improve how member capabilities are transmitted over the network, which can enhance the scalability of the system by ensuring more efficient data handling and transmission"
6653162c5484ec0c9ccdca1d,e6d20fab682b85a5f4a320566452b54777daf790,BetonQuest,Change Variable Type,Use of items as icon from another package for Compass (Backpack),https://github.com/BetonQuest/BetonQuest/issues/1192,https://github.com/BetonQuest/BetonQuest,https://github.com/BetonQuest/BetonQuest/commit/e6d20fab682b85a5f4a320566452b54777daf790,src/main/java/org/betonquest/betonquest/Backpack.java/494-494,Scalability Improvement,Fix-related,"Changing the variable type from String to Pair<QuestPackage, String> enhances the ability to manage items from multiple packages. This refactoring allows the system to scale more effectively by accommodating items from different sources, improving the versatility and adaptability of the compass functionality."
66772303cd111b750c4cccae,fae65f8893a489118b6106a749054fb2c439fa86,MagmaCore,Change Variable Type,Bulk Deletes and Creates in `MagmaCoreRemoteSparqlDatabase`,https://github.com/gchq/MagmaCore/issues/37,https://github.com/gchq/MagmaCore,https://github.com/gchq/MagmaCore/commit/fae65f8893a489118b6106a749054fb2c439fa86,src/main/java/uk/gov/gchq/magmacore/demo/SystemFunctions.java/88-89,Scalability Improvement,Fix-related,"The change from a specific type (KindOfAssociation) to var is an example of improving code flexibility and maintainability, which indirectly impacts scalability. By using var, the code can more easily adapt to changes in the underlying type without requiring updates to all variable declarations. "
6652f5785484ec0c9ccda13c,354eef2a9957bac28662c61c2a9cbe1bc873ecb5,rdf4j,Add Method Annotation,Clean up test suite to reduce build time,https://github.com/eclipse-rdf4j/rdf4j/issues/2925,https://github.com/eclipse-rdf4j/rdf4j,https://github.com/eclipse-rdf4j/rdf4j/commit/354eef2a9957bac28662c61c2a9cbe1bc873ecb5,core/sail/shacl/src/test/java/org/eclipse/rdf4j/sail/shacl/MultithreadedNativeStoreIT.java/28-28,Startup Time Reduction,Test-related,"this change is part of a larger effort to optimize the test suite and reduce build times. While the specific code change is small, it's part of a significant Test-related refactoring that aims to improve development efficiency."
665193d84eb27c185fe55eb4,219beedec339e204952906a88e608c25f832a372,dataverse,Add Method Annotation,New filter-based design for the API authentication mechanisms,https://github.com/IQSS/dataverse/issues/9293,https://github.com/IQSS/dataverse,https://github.com/IQSS/dataverse/commit/219beedec339e204952906a88e608c25f832a372,src/main/java/edu/harvard/iq/dataverse/api/Datasets.java/3095-3095,Unrelated to Performance Improvement,Maintenance-related,The refactoring involves adding a method annotation @AuthRequired and changing the method for obtaining the authenticated user. This refactoring enhances code maintainability and security by introducing a more structured approach to handle authenticated users.
6651400a4eb27c185fe4cf5a,8642def77ef30f49359a9ce19ff8238c7983438e,sdrtrunk,Add Method Annotation,Update Tuners to use CIC Channelizer to address poor P25 Decode Performance,https://github.com/DSheirer/sdrtrunk/issues/401,https://github.com/DSheirer/sdrtrunk,https://github.com/DSheirer/sdrtrunk/commit/8642def77ef30f49359a9ce19ff8238c7983438e,src/main/java/io/github/dsheirer/source/tuner/channel/CICTunerChannelSource.java/109-109,Unrelated to Performance Improvement,Maintenance-related,"These changes are primarily about improving the code structure, readability, and removing unnecessary or outdated functionality. While they don't directly optimize performance, they contribute to better maintainability of the codebase."
6652e7cc5484ec0c9ccd94eb,ce6321ac045b35cb135c8325cb7e6af7f92f624e,glassfish,Add Method Annotation,Message catalog key not transformed: using.default.ds,https://github.com/eclipse-ee4j/glassfish/issues/23873,https://github.com/eclipse-ee4j/glassfish,https://github.com/eclipse-ee4j/glassfish/commit/ce6321ac045b35cb135c8325cb7e6af7f92f624e,appserver/connectors/connectors-runtime/src/main/java/com/sun/enterprise/resource/pool/PoolManagerImpl.java/656-656,Unrelated to Performance Improvement,Maintenance-related,Adding the @Override annotation enhances code maintainability and readability by clearly indicating that the method overrides a method in its superclass.
664f04757b998c13cdbae2f8,d94bdf456e8a00cd1b836ba515f5ea44c9bfc561,graphql-java,Add Method Annotation,Deprecation of Apollo Cache Control Specification,https://github.com/graphql-java/graphql-java/issues/2759,https://github.com/graphql-java/graphql-java,https://github.com/graphql-java/graphql-java/commit/d94bdf456e8a00cd1b836ba515f5ea44c9bfc561,src/main/java/graphql/execution/ExecutionContext.java/166-166,Unrelated to Performance Improvement,Maintenance-related,"Adding the @Deprecated annotation indicates that the method is outdated and should not be used in future development. It enhances code maintainability by guiding developers towards newer, preferred methods."
6651a87e4eb27c185fe57021,8f006e5e633d21fb29ea4552701ab3771b17c09a,IPED,Add Method Annotation,Refactor module configuration,https://github.com/sepinf-inc/IPED/issues/538,https://github.com/sepinf-inc/IPED,https://github.com/sepinf-inc/IPED/commit/8f006e5e633d21fb29ea4552701ab3771b17c09a,iped-engine/src/main/java/dpf/sp/gpinf/indexer/config/IPEDConfig.java/57-57,Unrelated to Performance Improvement,Maintenance-related,"he refactoring involves adding the @Override annotation to the processConfig method. This change is focused on code clarity and correctness, ensuring that the method correctly overrides a method in its superclass. It does not directly impact performance metrics such as execution time, memory usage, or other performance aspects."
664d2b30c6ae44388495f15c,5203081561e891509975ca9c01d42a66e3b78e92,skywalking,Add Method Annotation,Topology ui Service SLA show error,https://github.com/apache/skywalking/issues/4273,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/5203081561e891509975ca9c01d42a66e3b78e92,apm-sniffer/apm-agent/src/main/java/org/skywalking/apm/agent/SkyWalkingAgent.java/56-56,Unrelated to Performance Improvement,Maintenance-related,"The commit message and code changes are focused on adding an annotation to a method, which typically pertains to improving code clarity, enforcing certain behaviors, or integrating with frameworks. This does not directly relate to any performance optimization categories."
667727dacd111b750c4cd543,c175c735ebced7f583507355991a6f525c7f5777,extension-springcloud,Add Method Annotation,The blackListedServiceInstances in SpringCloudCommandRouter should be reevaluated from time to time,https://github.com/AxonFramework/extension-springcloud/issues/6,https://github.com/AxonFramework/extension-springcloud,https://github.com/AxonFramework/extension-springcloud/commit/c175c735ebced7f583507355991a6f525c7f5777,springcloud/src/main/java/org/axonframework/extensions/springcloud/commandhandling/SpringCloudHttpBackupCommandRouter.java/88-88,Unrelated to Performance Improvement,Maintenance-related,code changes focus on deprecating a class and modifying its methods to ensure backward compatibility while indicating its deprecated status.
6651a8a74eb27c185fe57186,b01a7c29249bba2fdf543b80f502cc06ba5de089,IPED,Add Method Annotation,Refactor module configuration,https://github.com/sepinf-inc/IPED/issues/538,https://github.com/sepinf-inc/IPED,https://github.com/sepinf-inc/IPED/commit/b01a7c29249bba2fdf543b80f502cc06ba5de089,iped-engine/src/main/java/dpf/sp/gpinf/indexer/config/DocThumbTaskConfig.java/30-30,Unrelated to Performance Improvement,Maintenance-related,"changes are primarily maintenance-related, aimed at improving code organization, consistency, and clarity. The addition of the @Override annotation and the broader changes described in the commit message are part of a refactoring effort to enhance the overall structure and maintainability of the module configuration system."
6652e7f15484ec0c9ccd966c,2f8eae0aa5463c8c42796f32e370ce9f0ca1c555,RxStore,Add Method Annotation,Android + Kotlin build error: Multiple dex files define Lorg/jetbrains/annotations/NotNull,https://github.com/Gridstone/RxStore/issues/28,https://github.com/Gridstone/RxStore,https://github.com/Gridstone/RxStore/commit/2f8eae0aa5463c8c42796f32e370ce9f0ca1c555,rxstore/src/main/java/au/com/gridstone/rxstore/RealListStore.java/216-216,Unrelated to Performance Improvement,Maintenance-related,Adding the @Override and @NonNull annotations to the remove method ensures that the method correctly overrides a superclass or interface method and that the parameter is non-null.
6652f3435484ec0c9ccd9b31,245d8082ad9ad29e2e80e6fe1883895ca3031539,osmeditor4android,Add Method Annotation,Allow draging of way nodes when way is selected,https://github.com/MarcusWolschon/osmeditor4android/issues/1665,https://github.com/MarcusWolschon/osmeditor4android,https://github.com/MarcusWolschon/osmeditor4android/commit/245d8082ad9ad29e2e80e6fe1883895ca3031539,src/main/java/de/blau/android/Logic.java/1123-1123,Unrelated to Performance Improvement,Maintenance-related,"Adding the @NonNull annotation to the getClickedNodes method ensures that the method's return value is non-null, which helps prevent potential null pointer exceptions and clarifies the method's contract."
6652aeb84eb27c185fe6c58e,084f48191d64d175897de8e4173b4832d3f4f42c,Exchangis,Add Method Annotation,[Feature] Data synchronization task execution refactoring,https://github.com/WeBankFinTech/Exchangis/issues/286,https://github.com/WeBankFinTech/Exchangis,https://github.com/WeBankFinTech/Exchangis/commit/084f48191d64d175897de8e4173b4832d3f4f42c,exchangis-job/exchangis-job-common/src/main/java/com/webank/wedatasphere/exchangis/job/domain/GenericExchangisJob.java/77-77,Unrelated to Performance Improvement,Maintenance-related,"Adding the @Override annotation to the setEngineType method ensures that this method is correctly overriding a method from a superclass or interface. This refactoring improves code clarity and correctness, making the code more maintainable and reducing the likelihood of errors."
6652e7c35484ec0c9ccd9454,f3b5f4ce848f59bc986e4e81d10775ddab0ee094,glassfish,Add Method Annotation,Message catalog key not transformed: using.default.ds,https://github.com/eclipse-ee4j/glassfish/issues/23873,https://github.com/eclipse-ee4j/glassfish,https://github.com/eclipse-ee4j/glassfish/commit/f3b5f4ce848f59bc986e4e81d10775ddab0ee094,appserver/common/container-common/src/main/java/com/sun/enterprise/container/common/impl/EntityManagerWrapper.java/1056-1056,Unrelated to Performance Improvement,Maintenance-related,"Adding the @Override annotation ensures that the method is correctly overriding a method from a superclass or interface. This improves code readability, correctness, and maintainability by making the developer's intentions explicit."
664f62b57b998c13cdbb724c,986b39208f5b98ae83fc214fcbec8a7598e9067d,pmd,Add Method Annotation,[core] Consolidate PMD CLI into a single command,https://github.com/pmd/pmd/issues/2234,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/986b39208f5b98ae83fc214fcbec8a7598e9067d,pmd-core/src/main/java/net/sourceforge/pmd/cli/PMDCommandLineInterface.java/73-73,Unrelated to Performance Improvement,Maintenance-related,"Adding the @Deprecated annotation indicates that the method buildUsageText(JCommander jcommander) is outdated and should not be used in new code. This helps developers understand which parts of the code are legacy and may be removed or replaced in the future, improving code maintainability and clarity."
6652bc8b5484ec0c9ccd6e09,9dc5cea678ef423905f9833c27164ffbe169567c,transformer,Add Method Annotation,Command line updates: Allow rules to be specified multiple times.,https://github.com/eclipse/transformer/issues/85,https://github.com/eclipse/transformer,https://github.com/eclipse/transformer/commit/9dc5cea678ef423905f9833c27164ffbe169567c,org.eclipse.transformer/src/main/java/org/eclipse/transformer/action/impl/XmlActionImpl.java/349-349,Unrelated to Performance Improvement,Maintenance-related,"Adding the @SuppressWarnings(""unused"") annotation helps to clean up compilation warnings and improve code maintainability."
6652f5995484ec0c9ccda177,8580bfe21c0179e87a3971e305705415d7ccd15c,rdf4j,Add Method Annotation,Support for merge join and ordered indexes,https://github.com/eclipse-rdf4j/rdf4j/issues/4819,https://github.com/eclipse-rdf4j/rdf4j,https://github.com/eclipse-rdf4j/rdf4j/commit/8580bfe21c0179e87a3971e305705415d7ccd15c,core/queryalgebra/model/src/main/java/org/eclipse/rdf4j/query/algebra/TupleExpr.java/47-47,Unrelated to Performance Improvement,Maintenance-related,Adding the @Experimental annotation to the getOrder method signals to developers that this method is experimental and subject to change. This refactoring improves code clarity and maintainability by clearly communicating the status and intended use of the method. T
664f632d7b998c13cdbb7315,8ae6563fff7871bec37d21d806535668ba8c599f,pmd,Add Parameter,[apex] comments on constructor not recognized when the Class has inner class,https://github.com/pmd/pmd/issues/1783,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/8ae6563fff7871bec37d21d806535668ba8c599f,pmd-apex/src/main/java/net/sourceforge/pmd/lang/apex/ast/ApexTreeBuilder.java/359-359,Unrelated to Performance Improvement,Fix-related,"Adding parameters (targetStart and targetEnd) to the ApexDocTokenLocation constructor allows for more precise handling of token locations, addressing the issue with recognizing comments. This refactoring is fix-related, as it directly addresses and resolves a specific issue with the ApexDoc functionality, improving the accuracy and reliability of documentation processing."
6652bbbc5484ec0c9ccd6c01,d2219c4a1964bf5d245f006b9cb860ad4d161cf7,SukakuExplainer,Add Parameter,Move cell values and potentials to grid,https://github.com/SudokuMonster/SukakuExplainer/issues/26,https://github.com/SudokuMonster/SukakuExplainer,https://github.com/SudokuMonster/SukakuExplainer/commit/d2219c4a1964bf5d245f006b9cb860ad4d161cf7,diuf/sudoku/solver/rules/DirectHiddenSetHint.java/120-120,Unrelated to Performance Improvement,Maintenance-related,This refactoring doesn't directly relate to any of the specified performance categories.  Adding a parameter to a method signature doesn't inherently improve or degrade performance.
66772316cd111b750c4cccee,1f145949d882e9f2195847178c346fee7afb2776,MagmaCore,Add Parameter,Bulk Deletes and Creates in `MagmaCoreRemoteSparqlDatabase`,https://github.com/gchq/MagmaCore/issues/37,https://github.com/gchq/MagmaCore,https://github.com/gchq/MagmaCore/commit/1f145949d882e9f2195847178c346fee7afb2776,src/main/java/uk/gov/gchq/magmacore/demo/PossibleWorldContext.java/152-152,Unrelated to Performance Improvement,Maintenance-related,The change is primarily about code organization and separation of concerns. Moving the IRI creation to application-specific code allows for more flexibility and potentially better maintainability.
664f70787b998c13cdbb7d17,b9749d0cedce478d4fbbd22b8d386e35d4283508,querydsl,Add Parameter,Consider repackaging guava to prevent dependency conflict,https://github.com/querydsl/querydsl/issues/2038,https://github.com/querydsl/querydsl,https://github.com/querydsl/querydsl/commit/b9749d0cedce478d4fbbd22b8d386e35d4283508,src/main/java/com/mysema/codegen/model/ClassType.java/35-35,Unrelated to Performance Improvement,Maintenance-related,The commit message indicates moving the codegen core model from querydsl-core to codegen. This suggests a structural change in the project organization rather than a performance-focused modification.
6652bc905484ec0c9ccd6e13,b1e7de514baf2ff45765283d084ad0cd812610b0,transformer,Add Parameter,Command line updates: Allow rules to be specified multiple times.,https://github.com/eclipse/transformer/issues/85,https://github.com/eclipse/transformer,https://github.com/eclipse/transformer/commit/b1e7de514baf2ff45765283d084ad0cd812610b0,org.eclipse.transformer/src/main/java/org/eclipse/transformer/Transformer.java/1356-1356,Unrelated to Performance Improvement,Maintenance-related,"This refactoring improves the maintainability and functionality of the code by incorporating additional data into the validation process. It makes the method more comprehensive and capable of handling a broader range of scenarios, which is beneficial for ensuring code correctness and robustness."
6652faa65484ec0c9ccdaa79,998f12a462b3373b103c17319f5ad0fc99f05e73,SORMAS-Project,Add Parameter,Bulk action - send emails with uploaded attached documents [5],https://github.com/SORMAS-Foundation/SORMAS-Project/issues/13043,https://github.com/SORMAS-Foundation/SORMAS-Project,https://github.com/SORMAS-Foundation/SORMAS-Project/commit/998f12a462b3373b103c17319f5ad0fc99f05e73,sormas-backend/src/main/java/de/symeda/sormas/backend/document/DocumentFacadeEjb.java/119-119,Unrelated to Performance Improvement,Maintenance-related,"code changes focus on adding parameters to a method for sending emails with uploaded documents, which does not directly relate to any performance optimization categories."
6652aec84eb27c185fe6c618,93b91620f98a372a0564657bb763be86679e4efa,quantumdb,Add Parameter,"""Cleanup"" command",https://github.com/quantumdb/quantumdb/issues/66,https://github.com/quantumdb/quantumdb,https://github.com/quantumdb/quantumdb/commit/93b91620f98a372a0564657bb763be86679e4efa,quantumdb-postgresql/src/main/java/io/quantumdb/core/versioning/Backend.java/200-200,Unrelated to Performance Improvement,Maintenance-related,Adding the Version lastActive parameter to the persistChangelogEntries method helps improve the reliability and stability of the changelog persistence process.
665193a14eb27c185fe55e5e,cf57f1427a43c89c6729be92b207a14111327307,dataverse,Add Parameter,New filter-based design for the API authentication mechanisms,https://github.com/IQSS/dataverse/issues/9293,https://github.com/IQSS/dataverse,https://github.com/IQSS/dataverse/commit/cf57f1427a43c89c6729be92b207a14111327307,src/main/java/edu/harvard/iq/dataverse/api/Datasets.java/1861-1861,Unrelated to Performance Improvement,Maintenance-related,the described change focus on refactoring the API authentication mechanisms to use a new filter-based design. This change is aimed at improving the authentication process rather than directly optimizing performance.
664f72ab7b998c13cdbb8438,b1641092fac75d926199db35c621317cfcc9c639,rstudio,Add Parameter,rstudio_command_palette_search is slow,https://github.com/rstudio/rstudio/issues/6961,https://github.com/rstudio/rstudio,https://github.com/rstudio/rstudio/commit/b1641092fac75d926199db35c621317cfcc9c639,src/gwt/src/org/rstudio/studio/client/workbench/prefs/model/Prefs.java/203-203,Unrelated to Performance Improvement,Maintenance-related,"addresses the slowness of rstudio_command_palette_search but the refactoring itself, which involves adding title and description parameters, does not directly relate to performance optimization."
6652f39d5484ec0c9ccd9c1d,f5324c734b3b23d7d8f8dbc407f93cbf8c445104,vraptor4,Add Parameter,[proposal] Create a FaÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂade class to access Mirror API,https://github.com/caelum/vraptor4/issues/845,https://github.com/caelum/vraptor4,https://github.com/caelum/vraptor4/commit/f5324c734b3b23d7d8f8dbc407f93cbf8c445104,vraptor-core/src/main/java/br/com/caelum/vraptor/view/DefaultRefererResult.java/58-58,Unrelated to Performance Improvement,Maintenance-related,"refactoring described involve a design change to use instances instead of static methods. While this improves the flexibility and maintainability of the code, it does not directly relate to performance optimization."
664f65f97b998c13cdbb7977,1c05e5d9902d0ff69780365a0c5fa392c070fefd,bisq,Add Parameter,Users in Argentina and Lebanon unable to use Bisq ,https://github.com/bisq-network/bisq/issues/5581,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/1c05e5d9902d0ff69780365a0c5fa392c070fefd,pricenode/src/main/java/bisq/price/spot/providers/Luno.java/35-35,Unrelated to Performance Improvement,Maintenance-related,"Adding the Environment env parameter to the Luno constructor allows for greater flexibility and configurability, enabling the exclusion of currencies via configuration."
6652bbb85484ec0c9ccd6ba3,e02bbd61f2541b23256a58404236f7baf37c1c68,SukakuExplainer,Add Parameter,Move cell values and potentials to grid,https://github.com/SudokuMonster/SukakuExplainer/issues/26,https://github.com/SudokuMonster/SukakuExplainer,https://github.com/SudokuMonster/SukakuExplainer/commit/e02bbd61f2541b23256a58404236f7baf37c1c68,diuf/sudoku/Grid.java/377-377,Unrelated to Performance Improvement,Maintenance-related,"This change seems to be more about code organization or potentially improving the API of the class. It doesn't directly relate to fixing issues, modifying tests, or improving performance."
664f73607b998c13cdbb85cb,b3812efe354750df4e9f549456ef78b262f7d824,rstudio,Change Attribute Type,Background session's Help pane remains unchanged on switch between light to dark themes,https://github.com/rstudio/rstudio/issues/2583,https://github.com/rstudio/rstudio,https://github.com/rstudio/rstudio/commit/b3812efe354750df4e9f549456ef78b262f7d824,src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/events/EditorThemeChangedEvent.java/39-39,Unrelated to Performance Improvement,Maintenance-related,Changing the attribute type from String to AceTheme is aimed at improving the flexibility and maintainability of the code by allowing the use of more complex and structured data for themes.
664d1eedc6ae44388495e8fb,e507bb9e6a8c086bd15dee8778b1bb22b778c416,skywalking,Change Attribute Type,[Feature] Build Distributed Query Module for BanyanDB,https://github.com/apache/skywalking/issues/11237,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/e507bb9e6a8c086bd15dee8778b1bb22b778c416,apm-collector/apm-collector-agentregister/src/main/java/org/skywalking/apm/collector/agentregister/grpc/handler/ApplicationRegisterServiceHandler.java/21-21,Unrelated to Performance Improvement,Maintenance-related,"code changes focus on renaming a variable to improve code clarity and readability. This change is aimed at enhancing code quality and maintainability, but it does not directly relate to any performance optimization categories."
6652f3805484ec0c9ccd9bac,14f0cc4508d0f9de0a684829ffb70ed4845ac03a,vraptor4,Change Attribute Type,replace some interceptor for events,https://github.com/caelum/vraptor4/issues/247,https://github.com/caelum/vraptor4,https://github.com/caelum/vraptor4/commit/14f0cc4508d0f9de0a684829ffb70ed4845ac03a,vraptor-core/src/main/java/br/com/caelum/vraptor/interceptor/ParametersInstantiatorInterceptor.java/62-62,Unrelated to Performance Improvement,Maintenance-related,"code changes focus on renaming an event type, which does not directly relate to any performance optimization categories."
6651408f4eb27c185fe4d113,f3301c140d8321ce29cf63b418e44623f84e0ba0,pgjdbc,Change Attribute Type,Loom compatible - replace synchronized block with for example j.u.c.ReentrantLock,https://github.com/pgjdbc/pgjdbc/issues/1951,https://github.com/pgjdbc/pgjdbc,https://github.com/pgjdbc/pgjdbc/commit/f3301c140d8321ce29cf63b418e44623f84e0ba0,pgjdbc/src/main/java/org/postgresql/jdbc/ArrayEncoding.java/767-922,Unrelated to Performance Improvement,Maintenance-related,"ode changes focus on resolving an issue with class information parsing by replacing a synchronized block with a ReentrantLock and changing an attribute type. This change is primarily about compatibility and ensuring proper parsing, not directly about performance optimization."
664f658f7b998c13cdbb78c4,c98b185e3da512111bab315e78b04a4b1ab9c558,bisq,Change Attribute Type,Have an option to edit offers,https://github.com/bisq-network/bisq/issues/516,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/c98b185e3da512111bab315e78b04a4b1ab9c558,src/main/java/bisq/desktop/main/portfolio/openoffer/OpenOffersView.java/417-417,Unrelated to Performance Improvement,Maintenance-related,"Changing the attribute type from Button to CheckBox modifies the user interface elements used within the TableCell. This refactoring aligns the UI components with the desired functionality, improving the code's readability and maintainability. Therefore, it is classified as a maintenance-related improvement."
6652f3a05484ec0c9ccd9c2c,1917d2b3439053c1a859e7cbd26860aa869ff66e,vraptor4,Change Attribute Type,[proposal] Create a FaÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂ¢ÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂade class to access Mirror API,https://github.com/caelum/vraptor4/issues/845,https://github.com/caelum/vraptor4,https://github.com/caelum/vraptor4/commit/1917d2b3439053c1a859e7cbd26860aa869ff66e,vraptor-core/src/main/java/br/com/caelum/vraptor/serialization/xstream/VRaptorClassMapper.java/40-40,Unrelated to Performance Improvement,Maintenance-related,"Changing the attribute type from ReflectionProvider to Supplier<ReflectionProvider> implements lazy instantiation, which defers the creation of the ReflectionProvider until it is actually needed."
664e81987b998c13cdba537a,0f84d0c9900a267bdda9defb2f7c6bc38845c695,cryptomator,Change Attribute Type,Support for FUSE-T (macOS FUSE implementation without kext),https://github.com/cryptomator/cryptomator/issues/2482,https://github.com/cryptomator/cryptomator,https://github.com/cryptomator/cryptomator/commit/0f84d0c9900a267bdda9defb2f7c6bc38845c695,src/main/java/org/cryptomator/ui/preferences/VolumePreferencesController.java/30-30,Unrelated to Performance Improvement,Maintenance-related,Changing the attribute type from VolumeImpl to MountService for the ChoiceBox updates the code to use a different type that is more appropriate for the new APIs.
664f2c937b998c13cdbb185f,3aa6b378346bd88ed53eb4eb6a6b1b537f917c55,AntennaPod,Change Attribute Type,Modularize code to improve testability,https://github.com/AntennaPod/AntennaPod/issues/4661,https://github.com/AntennaPod/AntennaPod,https://github.com/AntennaPod/AntennaPod/commit/3aa6b378346bd88ed53eb4eb6a6b1b537f917c55,core/src/free/java/de/danoeh/antennapod/core/ClientConfig.java/36-36,Unrelated to Performance Improvement,Maintenance-related,"Changing the attribute type from DBTasksCallbacks to AutomaticDownloadAlgorithm and removing the related interface and class helps in simplifying the code structure. This refactoring improves the modularity and clarity of the code, making it easier to understand, test, and maintain."
6652b07b4eb27c185fe6c7b2,9cdf3c691b95d61749439afda619d48d496f41e5,cucumber-eclipse,Change Parameter Type,"Allow multiple packages in the option ""Only match steps from specific package and sub-packages""",https://github.com/cucumber/cucumber-eclipse/issues/302,https://github.com/cucumber/cucumber-eclipse,https://github.com/cucumber/cucumber-eclipse/commit/9cdf3c691b95d61749439afda619d48d496f41e5,cucumber.eclipse.steps.jdt/src/main/java/cucumber/eclipse/steps/jdt/JavaStepDefinitionsProvider.java/427-427,Unrelated to Performance Improvement,Maintenance-related,The method signature is changed from using Collection<Step> to Collection<StepDefinition>. This suggests a more specific and possibly more appropriate type for the collected steps. This change improves type safety and potentially makes the code more maintainable and less error-prone. It allows for better contextualization of step definitions within the project.
664f5cc87b998c13cdbb6c5d,5cf826c8d089d7b4c9f1b1e319140d1b9451b82d,graphhopper,Change Parameter Type,Use dynamic flag assignment in flag encoders,https://github.com/graphhopper/graphhopper/issues/66,https://github.com/graphhopper/graphhopper,https://github.com/graphhopper/graphhopper/commit/5cf826c8d089d7b4c9f1b1e319140d1b9451b82d,core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java/123-123,Unrelated to Performance Improvement,Maintenance-related,This refactoring improves code maintainability by using a different encoder type that may be more appropriate or provide additional functionality. 
6652e6025484ec0c9ccd92f8,c039f48fa5218793952eadfbf1e090af59adeee4,Ice_and_Fire,Change Parameter Type, Dragon Source Refactoring [SOURCE],https://github.com/AlexModGuy/Ice_and_Fire/issues/4004,https://github.com/AlexModGuy/Ice_and_Fire,https://github.com/AlexModGuy/Ice_and_Fire/commit/c039f48fa5218793952eadfbf1e090af59adeee4,src/main/java/com/github/alexthe666/iceandfire/client/model/animator/DragonTabulaModelAnimator.java/83-83,Unrelated to Performance Improvement,Maintenance-related,This commit focuses on code refactoring and organization rather than direct performance optimization. The changes are aimed at improving code structure and reusability.
664e3d837b998c13cdb9ed62,e63538d9060f8b218726d1f3fb5559c8a00fdce8,quarkus,Change Parameter Type,OIDC Introspection and Userinfo Cache,https://github.com/quarkusio/quarkus/issues/12800,https://github.com/quarkusio/quarkus,https://github.com/quarkusio/quarkus/commit/e63538d9060f8b218726d1f3fb5559c8a00fdce8,extensions/oidc/runtime/src/main/java/io/quarkus/oidc/runtime/DefaultTokenStateManager.java/66-66,Unrelated to Performance Improvement,Maintenance-related,refactoring described do not indicate a direct relationship with performance improvements. It focuses on a change in parameter type for better code organization and potentially enhanced flexibility.
66531dcc5484ec0c9ccdcc18,efa679ba315c85152e3e9d830c359b34df6de0d4,QuranApp,Change Parameter Type,Media buttons support and auto-pause on headphones disconnect,https://github.com/AlfaazPlus/QuranApp/issues/221,https://github.com/AlfaazPlus/QuranApp,https://github.com/AlfaazPlus/QuranApp/commit/efa679ba315c85152e3e9d830c359b34df6de0d4,app/src/main/java/com/quranapp/android/views/reader/dialogs/VerseOptionsDialog.java/176-176,Unrelated to Performance Improvement,Maintenance-related,These changes improve user experience and functionality but do not directly relate to performance optimization.
665185754eb27c185fe54ddf,cf4eda63da35256206a96346b05c8e2b4ebee7b0,eo,Change Parameter Type,Mojo that prints XMIR to EO,https://github.com/objectionary/eo/issues/2592,https://github.com/objectionary/eo,https://github.com/objectionary/eo/commit/cf4eda63da35256206a96346b05c8e2b4ebee7b0,eo-maven-plugin/src/test/java/org/eolang/maven/FakeMaven.java/137-137,Unrelated to Performance Improvement,Maintenance-related,"Changing the parameter type from HmBase to Home in the FakeMaven constructor improves the clarity and alignment of the code with its intended use. This refactoring ensures that the code uses the most appropriate types, enhancing readability and maintainability."
664f63ae7b998c13cdbb739a,b584fdf419b031818016505596aa6b899e492972,bisq,Change Parameter Type,Redesign DAO state monitoring to avoid performance degradation,https://github.com/bisq-network/bisq/issues/5779,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/b584fdf419b031818016505596aa6b899e492972,core/src/main/java/bisq/core/api/CoreOffersService.java/100-100,Unrelated to Performance Improvement,Maintenance-related,Changing the parameter type from OfferFilter to OfferFilterService ensures that the code uses a more descriptive and appropriate type name. This refactoring improves code readability and maintainability by making it clearer what the parameter represents.
664cf7bcc6ae44388495b5d9,0db12e5561f66eb9a717998910c9cb064768af99,NewPipe,Change Parameter Type,Release v0.26.0 (please TEST!),https://github.com/TeamNewPipe/NewPipe/issues/10471,https://github.com/TeamNewPipe/NewPipe,https://github.com/TeamNewPipe/NewPipe/commit/0db12e5561f66eb9a717998910c9cb064768af99,app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java/56-56,Unrelated to Performance Improvement,Maintenance-related,"Changing the parameter type from stream to streamsWrapper and renaming StreamSizeWrapper to StreamInfoWrapper enhances the clarity and descriptive nature of the code. These changes improve the readability and maintainability of the code, making it easier for developers to understand and work with."
66773f35cd111b750c4cf28f,d9bab965b051a411568f0691e04d53d73be23c1f,Biomancy,Change Parameter Type,Energy problem in chewer/digester cycle.,https://github.com/Elenterius/Biomancy/issues/8,https://github.com/Elenterius/Biomancy,https://github.com/Elenterius/Biomancy/commit/d9bab965b051a411568f0691e04d53d73be23c1f,src/main/java/com/github/elenterius/biomancy/inventory/DecomposerContainer.java/83-83,Unrelated to Performance Improvement,Maintenance-related,"Changing the parameter type from FluidItemInvContents to SimpleInvContents standardizes the input type and potentially simplifies the handling of these contents. This refactoring makes the codebase cleaner and easier to maintain, which can lead to fewer bugs and more stable behavior."
6651333e4eb27c185fe4b8df,20e202d2f7b0195b138a53178672bda5c8bf6298,eventmesh,Change Return Type,[Enhancement] Method appears to call the same method on the same object redundantly [SendAsyncEventProcessor],https://github.com/apache/eventmesh/issues/2671,https://github.com/apache/eventmesh,https://github.com/apache/eventmesh/commit/20e202d2f7b0195b138a53178672bda5c8bf6298,eventmesh-metrics-plugin/eventmesh-metrics-api/src/main/java/org/apache/eventmesh/metrics/api/model/TcpSummaryMetrics.java/104-104,Unrelated to Performance Improvement,Fix-related,"Changing the return type from double to int for the getMq2eventMeshTPS method addresses an inconsistency or potential error in the code, aligning the method's return type with the expected or more appropriate data type."
665186874eb27c185fe54f2d,4ea70b15e7b3a20dae83cfba50748fbcf8abacbf,OpenTracks,Change Return Type,Heart rate zones and graph in the real of time,https://github.com/OpenTracksApp/OpenTracks/issues/1118,https://github.com/OpenTracksApp/OpenTracks,https://github.com/OpenTracksApp/OpenTracks/commit/4ea70b15e7b3a20dae83cfba50748fbcf8abacbf,src/main/java/de/dennisguse/opentracks/util/StatisticsUtils.java/29-29,Unrelated to Performance Improvement,Maintenance-related,The refactoring involves renaming the Layout class to RecordingLayout and updating the method to use the new class name. This change is aimed at improving code clarity and maintainability by providing a more descriptive class name.
664cf5c2c6ae44388495b0fe,d08eac68823fe7ff31b5d825173df9efc0048439,nacos,Change Return Type,Unified implementation of Http requests,https://github.com/alibaba/nacos/issues/2858,https://github.com/alibaba/nacos,https://github.com/alibaba/nacos/commit/d08eac68823fe7ff31b5d825173df9efc0048439,common/src/main/java/com/alibaba/nacos/common/http/client/HttpClientRequest.java/40-40,Unrelated to Performance Improvement,Maintenance-related,This refactoring enhances maintainability by standardizing the HTTP client implementation and making the codebase more consistent
6652be325484ec0c9ccd72a6,79206830d37a8dc025ff9ed520107085d6dda8c6,lisa,Change Return Type,[BUG] Enforce ordering in string representations of abstract states,https://github.com/lisa-analyzer/lisa/issues/46,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/79206830d37a8dc025ff9ed520107085d6dda8c6,lisa/src/main/java/it/unive/lisa/LiSAConfiguration.java/168-168,Unrelated to Performance Improvement,Maintenance-related,"The refactoring involves introducing a new method setDumpTypeInference in the LiSAConfiguration class. This change is focused on improving the configuration management for analysis, making it more structured and manageable."
664f65b97b998c13cdbb790f,1a133f4b67f29a16fe654b1915dfec509eb7f8f5,bisq,Change Return Type,Implement wallet protection rpc methods,https://github.com/bisq-network/bisq/issues/4198,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/1a133f4b67f29a16fe654b1915dfec509eb7f8f5,cli/src/main/java/bisq/cli/app/CommandParser.java/25-25,Unrelated to Performance Improvement,Maintenance-related,code changes are focused on simplifying the authentication mechanism by replacing username and password with a single API token. This change enhances security and usability but does not directly relate to any performance optimization categories.
66515a574eb27c185fe51053,fcee1df7443ee28d2b80da59497e450b602d3f36,cgeo,Change Return Type,NullPointerException in Geopoint.distanceTo,https://github.com/cgeo/cgeo/issues/10071,https://github.com/cgeo/cgeo,https://github.com/cgeo/cgeo/commit/fcee1df7443ee28d2b80da59497e450b602d3f36,main/src/cgeo/geocaching/downloader/MapDownloaderOpenAndroMapsThemes.java/70-70,Unrelated to Performance Improvement,Maintenance-related,Changing the return type to a different class (MapDownloaderOpenAndroMapsThemes instead of MapDownloaderElevate) and adjusting the naming improves code readability and maintainability.
664d71a4c6ae443884964973,d6bd02ea7d52cbb1c55073b72926c06c6214e407,keycloak,Change Return Type,Escape character in SAML response,https://github.com/keycloak/keycloak/issues/14529,https://github.com/keycloak/keycloak,https://github.com/keycloak/keycloak/commit/d6bd02ea7d52cbb1c55073b72926c06c6214e407,core/src/main/java/org/keycloak/representations/adapters/action/SessionStats.java/32-32,Unrelated to Performance Improvement,Maintenance-related,"Changing the return type from Set<String> to Map<String, UserStats> provides a more detailed and structured representation of user information, which can include additional statistics or metadata about the users."
664e819e7b998c13cdba5388,1b4117de3861fbc8140c5960743136402dbf0582,cryptomator,Change Return Type,Support for FUSE-T (macOS FUSE implementation without kext),https://github.com/cryptomator/cryptomator/issues/2482,https://github.com/cryptomator/cryptomator,https://github.com/cryptomator/cryptomator/commit/1b4117de3861fbc8140c5960743136402dbf0582,src/main/java/org/cryptomator/ui/preferences/VolumePreferencesController.java/70-70,Unrelated to Performance Improvement,Maintenance-related,Changing the method name from showWebDavSettingsProperty to loopbackPortSupportedProperty and the return type from BooleanBinding to BooleanExpression enhances code clarity and maintainability.
664cf5f3c6ae44388495b2b8,031c9ef52124fa8d82cd9dff65486f7c7f9be96d,nacos,Change Return Type,Unified implementation of Http requests,https://github.com/alibaba/nacos/issues/2858,https://github.com/alibaba/nacos,https://github.com/alibaba/nacos/commit/031c9ef52124fa8d82cd9dff65486f7c7f9be96d,common/src/main/java/com/alibaba/nacos/common/http/client/NacosRestTemplate.java/131-131,Unrelated to Performance Improvement,Maintenance-related,Changing the return type from RestResult<T> to HttpRestResult<T> improves the specificity and clarity of the method's return type. This refactoring enhances the code's readability and maintainability by using a more appropriate type that likely aligns better with the method's functionality and the overall design of the code.
66515b944eb27c185fe51257,b2f1a742a2e8ae533a4ca437c350d001e5c52c8d,gradle-profiler,Change Return Type,Android studio sync measurement fails in 2nd build,https://github.com/gradle/gradle-profiler/issues/377,https://github.com/gradle/gradle-profiler,https://github.com/gradle/gradle-profiler/commit/b2f1a742a2e8ae533a4ca437c350d001e5c52c8d,src/main/java/org/gradle/profiler/ScenarioInvoker.java/27-27,Unrelated to Performance Improvement,Maintenance-related,Changing the return type from List<Sample<? super R>> to SampleProvider<R> makes the method more flexible and better aligned with the new requirements for handling multiple Gradle invocations.
6652bea15484ec0c9ccd762f,b1825c611539e0648e17f1850448b65e812aba02,lisa,Change Return Type,[FEATURE REQUEST] Refactor project structure,https://github.com/lisa-analyzer/lisa/issues/205,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/b1825c611539e0648e17f1850448b65e812aba02,lisa/lisa-sdk/src/main/java/it/unive/lisa/LiSAFactory.java/408-408,Unrelated to Performance Improvement,Maintenance-related,"The change in return type suggests a shift in how alternatives are conceptualized in the system. Instead of a flat collection of alternative classes, the new structure allows for a more hierarchical or relational representation of alternatives."
6652be9d5484ec0c9ccd75f4,89d1a8df6016498ea3a1bf507b9c4b45682052e4,lisa,Change Variable Type,[FEATURE REQUEST] Refactor project structure,https://github.com/lisa-analyzer/lisa/issues/205,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/89d1a8df6016498ea3a1bf507b9c4b45682052e4,lisa/lisa-sdk/src/test/java/it/unive/lisa/program/cfg/ConditionalsExtractionTest.java/155-155,Unrelated to Performance Improvement,Maintenance-related,Changing the variable type from Int32Literal to VariableRef generalizes the code to work with a broader range of variable references instead of a specific integer literal.
66517afa4eb27c185fe53e59,dd025e69c30b3cf3e826c32e75e802565b3e75b2,JPlag,Change Variable Type,"End to end testing - ""comparative values""",https://github.com/jplag/JPlag/issues/548,https://github.com/jplag/JPlag,https://github.com/jplag/JPlag/commit/dd025e69c30b3cf3e826c32e75e802565b3e75b2,jplag.endToEndTesting/src/test/java/jplag/endToEndTesting/javaTestCases.java/46-46,Unrelated to Performance Improvement,Test-related,"This refactoring is now understood to be primarily associated with improving or modifying test code. The change from JPlagTestSuiteHelper to TestCaseModel suggests a shift in how test cases are being created or managed, likely as a result of the switch from org.json to jackson-json."
6652d96c5484ec0c9ccd8835,a39a6628bec94ad319f7974d16a3a2a9754b1608,cloudsimplus,Change Variable Type,"Virtual memory and BW oversubscription implementation: when a Cloudlet requests more RAM or BW than there is available, its execution should be delayed",https://github.com/cloudsimplus/cloudsimplus/issues/170,https://github.com/cloudsimplus/cloudsimplus,https://github.com/cloudsimplus/cloudsimplus/commit/a39a6628bec94ad319f7974d16a3a2a9754b1608,cloudsim-plus/src/test/java/org/cloudbus/cloudsim/resources/SanStorageTest.java/290-290,Unrelated to Performance Improvement,Test-related,"change doesn't fall into a specific performance optimization category, it contributes to the overall Reliability and Stability Improvement of the system. By adapting tests to a redesigned storage system, it ensures that the system continues to function correctly after significant changes."
664ec8b67b998c13cdba96c4,ce8d618c77d23e20a1ddb128bb8183048597d096,beam,Extract Method,[Bug]: ElasticsearchIO connector does not properly estimate index size,https://github.com/apache/beam/issues/24117,https://github.com/apache/beam,https://github.com/apache/beam/commit/ce8d618c77d23e20a1ddb128bb8183048597d096,sdks/java/io/elasticsearch-tests/elasticsearch-tests-common/src/test/java/org/apache/beam/sdk/io/elasticsearch/ElasticsearchIOTestUtils.java/114-130,Unrelated to Performance Improvement,Maintenance-related,"Extracting the method to handle the creation of an index with or without an alias improves code readability and maintainability. By modularizing the logic, the code becomes easier to understand, test, and maintain."
6677143a3cbfb03cd095712e,79047e8c9dfc79b7c65a48175ae5d2358b67c12c,BedWars2023,Extract Method,Add per arena group shops,https://github.com/tomkeuper/BedWars2023/issues/200,https://github.com/tomkeuper/BedWars2023,https://github.com/tomkeuper/BedWars2023/commit/79047e8c9dfc79b7c65a48175ae5d2358b67c12c,bedwars-plugin/src/main/java/com/tomkeuper/bedwars/shop/listeners/InventoryListener.java/163-174,Unrelated to Performance Improvement,Maintenance-related,Extracting the checkSlot method from the main logic reduces duplication and simplifies the code. This enhances maintainability and readability by encapsulating the slot checking logic into a separate method.
6651a9734eb27c185fe57495,a48e0b35a2bee39203494951a9ec1f79e24a7f55,IPED,Extract Method,HtmlViewer vulnerabilities in Windows and Linux,https://github.com/sepinf-inc/IPED/issues/895,https://github.com/sepinf-inc/IPED,https://github.com/sepinf-inc/IPED/commit/a48e0b35a2bee39203494951a9ec1f79e24a7f55,iped-parsers/iped-parsers-impl/src/main/java/dpf/sp/gpinf/indexer/parsers/util/Util.java/391-415,Unrelated to Performance Improvement,Maintenance-related,"Extracting the method getTrueExtension consolidates the logic for determining the true file extension into a separate, reusable method. This refactoring enhances code readability, maintainability, and reduces duplication."
66773f22cd111b750c4cf238,2029bca2b96562bd655d3ebccd5d2aa7e171b0a9,Biomancy,Extract Method,Energy problem in chewer/digester cycle.,https://github.com/Elenterius/Biomancy/issues/8,https://github.com/Elenterius/Biomancy,https://github.com/Elenterius/Biomancy/commit/2029bca2b96562bd655d3ebccd5d2aa7e171b0a9,src/main/java/com/github/elenterius/biomancy/util/VoxelShapeUtil.java/45-57,Unrelated to Performance Improvement,Maintenance-related,"Extracting methods for rotating VoxelShapes along different axes (rotateXAxis, rotateYAxis, rotateZAxis) from the main createRotated method improves code readability and modularity. This refactoring enhances the maintainability of the code by isolating specific rotation logic into separate methods, making the code easier to understand, modify, and extend."
664cf781c6ae44388495b58b,9a0c2c40bd6fa6e5f77fd9ee317ba8ebb881aba8,NewPipe,Extract Method,Subtitle text area is smaller for no reason than 0.19.8,https://github.com/TeamNewPipe/NewPipe/issues/4294,https://github.com/TeamNewPipe/NewPipe,https://github.com/TeamNewPipe/NewPipe/commit/9a0c2c40bd6fa6e5f77fd9ee317ba8ebb881aba8,app/src/main/java/org/schabi/newpipe/player/VideoPlayerImpl.java/752-784,Unrelated to Performance Improvement,Maintenance-related,"Extracting the switchFromPopupToMain method from the onClick method improves code readability and modularity. This refactoring helps isolate the logic for switching from a popup player to the main player, making the onClick method cleaner and more focused."
665184ef4eb27c185fe54cb3,931a018d4f1c8352ea272274312eb99e70de759b,MultiThreadDownload,Extract Method,How to resume a download,https://github.com/Aspsine/MultiThreadDownload/issues/34,https://github.com/Aspsine/MultiThreadDownload,https://github.com/Aspsine/MultiThreadDownload/commit/931a018d4f1c8352ea272274312eb99e70de759b,library/src/main/java/com/aspsine/multithreaddownload/core/ConnectTaskImpl.java/130-135,Unrelated to Performance Improvement,Maintenance-related,"Extracting the parseResponse and checkCanceled methods from existing logic improves code readability and modularity. By isolating the response parsing and cancellation check into separate methods, the main logic becomes cleaner and more focused."
664f39097b998c13cdbb26ea,4107897e89d7557b2eeaea75e0d04a075b445a4f,javaparser,Extract Method,Further improve correction of whitespace during difference application,https://github.com/javaparser/javaparser/issues/1638,https://github.com/javaparser/javaparser,https://github.com/javaparser/javaparser/commit/4107897e89d7557b2eeaea75e0d04a075b445a4f,javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/RemovedGroup.java/113-130,Unrelated to Performance Improvement,Maintenance-related,Extracting methods as part of the cleanup improves code readability and maintainability.
6651a60a4eb27c185fe56ba0,b1c1edc7f0fc12ee0b2bdeedf463b50ad3e7d2c6,DSpace,Extract Method,MetadataValues' list doesn't respect ordering after been modified,https://github.com/DSpace/DSpace/issues/8736,https://github.com/DSpace/DSpace,https://github.com/DSpace/DSpace/commit/b1c1edc7f0fc12ee0b2bdeedf463b50ad3e7d2c6,dspace-server-webapp/src/test/java/org/dspace/app/rest/PatchMetadataIT.java/1513-1543,Unrelated to Performance Improvement,Fix-related,This refactoring improves code maintainability by reducing redundancy and encapsulating logic in a single method. It enhances readability and makes the codebase easier to manage and extend.
664f2a287b998c13cdbb1360,26dbd346d2d097e3cecf47b831cad198c915ed3a,robolectric,Extract Method,Robolectric cannot download artifacts - all tests fail,https://github.com/robolectric/robolectric/issues/5456,https://github.com/robolectric/robolectric,https://github.com/robolectric/robolectric/commit/26dbd346d2d097e3cecf47b831cad198c915ed3a,src/test/java/com/xtremelabs/robolectric/res/XmlFileLoaderTest.java/79-99,Unrelated to Performance Improvement,Test-related," refactoring is Test-related because:It's part of an effort to implement remaining unit tests, as stated in the commit message. The extracted method likely facilitates easier creation of test scenarios involving XML parsing."
664f2a6c7b998c13cdbb13d3,c7e5dd0ea0fd98057d2ceedf4ec3b2babb72e34e,robolectric,Extract Method,Bitmap.createScaledBitmap doesn't modify colors array,https://github.com/robolectric/robolectric/issues/6273,https://github.com/robolectric/robolectric,https://github.com/robolectric/robolectric/commit/c7e5dd0ea0fd98057d2ceedf4ec3b2babb72e34e,robolectric/src/test/java/org/robolectric/shadows/ShadowBitmapTest.java/784-789,Unrelated to Performance Improvement,Test-related,This refactoring enhances the testability and maintainability of the code by consolidating repetitive test logic into a single method.
6652be6d5484ec0c9ccd746d,0c59c3d6f63eeb29dbb8d8c4991944953b8e913a,lisa,Extract Method,[BUG] Missing HTML support files when no analysis is executed,https://github.com/lisa-analyzer/lisa/issues/302,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/0c59c3d6f63eeb29dbb8d8c4991944953b8e913a,lisa/lisa-sdk/src/main/java/it/unive/lisa/LiSARunner.java/297-311,Unrelated to Performance Improvement,Maintenance-related,Extracting methods as part of the cleanup improves code readability and maintainability.
66772a70cd111b750c4cdbe4,4912a08da04ec81a492e2553fc2c3192a6b8dc74,txtUML,Move Class,Separate model execution,https://github.com/ELTE-Soft/txtUML/issues/255,https://github.com/ELTE-Soft/txtUML,https://github.com/ELTE-Soft/txtUML/commit/4912a08da04ec81a492e2553fc2c3192a6b8dc74,dev/tests/hu.elte.txtuml.api.model.execution.tests/src/hu/elte/txtuml/api/model/execution/error/multiplicity/UpperBoundOffendedTest.java/12-27,Unrelated to Performance Improvement,Maintenance-related,"The commit message simply states a renaming of a project from ""api.model.tests"" to ""api.model.execution.tests""."
66773f11cd111b750c4cf209,4d6d518b94f3913a4abb653b16b905fefc5432f9,Biomancy,Move Class,Energy problem in chewer/digester cycle.,https://github.com/Elenterius/Biomancy/issues/8,https://github.com/Elenterius/Biomancy,https://github.com/Elenterius/Biomancy/commit/4d6d518b94f3913a4abb653b16b905fefc5432f9,src/main/java/com/github/elenterius/biomancy/handler/item/InputFilterItemStackHandler.java/10-61,Unrelated to Performance Improvement,Maintenance-related,"The commit message indicates a functional change: ""reworked digester to produce fluid nutrient slurry instead of items"". This suggests a change in game mechanics or simulation behavior rather than a performance-focused modification."
664f63c67b998c13cdbb73da,babd70cc2a8230ba72cf8ed205ec326ef2d24969,bisq,Move Class,Redesign DAO state monitoring to avoid performance degradation,https://github.com/bisq-network/bisq/issues/5779,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/babd70cc2a8230ba72cf8ed205ec326ef2d24969,core/src/main/java/bisq/core/trade/protocol/bisq_v1/tasks/maker/MakerSendsInputsForDepositTxResponse.java/45-133,Unrelated to Performance Improvement,Maintenance-related,Moving classes between packages is primarily about code organization and structure. It doesn't inherently affect runtime performance.
66517db74eb27c185fe549d7,0bf27fca15f1a56e1b342174e3d8247f3d234a99,Slimefun4,Move Class,Automated Crafting Chamber ignores crafting-permissions,https://github.com/Slimefun/Slimefun4/issues/1161,https://github.com/Slimefun/Slimefun4,https://github.com/Slimefun/Slimefun4/commit/0bf27fca15f1a56e1b342174e3d8247f3d234a99,src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/machines/auto_crafters/AbstractRecipe.java/17-66,Unrelated to Performance Improvement,Maintenance-related,"This commit made some general refactorings as part of the performance optimization process and this refactorings ""moving classes"" doesnÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂÃÂt affect performance in anyway."
6652be305484ec0c9ccd726e,53c92d89c6de3709dc99131e47126b431fdd0cee,lisa,Move Class,[BUG] Enforce ordering in string representations of abstract states,https://github.com/lisa-analyzer/lisa/issues/46,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/53c92d89c6de3709dc99131e47126b431fdd0cee,lisa/src/test/java/it/unive/lisa/imp/expressions/IMPNeg.java/17-53,Unrelated to Performance Improvement,Maintenance-related,This commit involves reorganizing test packages as stated in the commit message.
664d1ebec6ae44388495e7d4,640440d5810a6e764da971a06bb2914b82266442,skywalking,Move Class,[Feature] Build Distributed Query Module for BanyanDB,https://github.com/apache/skywalking/issues/11237,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/640440d5810a6e764da971a06bb2914b82266442,apm-collector/apm-collector-stream/src/main/java/org/skywalking/apm/collector/stream/UsedRoleNameException.java/3-7,Unrelated to Performance Improvement,Maintenance-related,This refactoring enhances the maintainability and organization of the codebase by placing the class in a more appropriate package.
664f63c37b998c13cdbb73bb,87c12fda8c9d95cac288235dd9655ba707ac3391,bisq,Move Class,Redesign DAO state monitoring to avoid performance degradation,https://github.com/bisq-network/bisq/issues/5779,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/87c12fda8c9d95cac288235dd9655ba707ac3391,core/src/main/java/bisq/core/trade/protocol/bisq_v1/SellerProtocol.java/49-186,Unrelated to Performance Improvement,Maintenance-related,This refactoring enhances the maintainability and organization of the codebase by logically grouping related classes under a new package.
664d1edcc6ae44388495e872,b53a3c5b536524aa2c095148ccd747bd0b42c0e5,skywalking,Move Class,[Feature] Build Distributed Query Module for BanyanDB,https://github.com/apache/skywalking/issues/11237,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/b53a3c5b536524aa2c095148ccd747bd0b42c0e5,apm-collector/apm-collector-stream/src/main/java/org/skywalking/apm/collector/stream/worker/AbstractWorkerProvider.java/3-21,Unrelated to Performance Improvement,Maintenance-related,These changes appear to be part of a larger refactoring effort to support the new Distributed Query Module feature.
6652be2b5484ec0c9ccd723b,c4fa0c32a7d3a269d021e375626e4a57fac80a16,lisa,Move Class,[BUG] Enforce ordering in string representations of abstract states,https://github.com/lisa-analyzer/lisa/issues/46,https://github.com/lisa-analyzer/lisa,https://github.com/lisa-analyzer/lisa/commit/c4fa0c32a7d3a269d021e375626e4a57fac80a16,lisa/src/main/java/it/unive/lisa/analysis/heap/HeapSemanticOperation.java/13-191,Unrelated to Performance Improvement,Maintenance-related,"While the issue title mentions enforcing ordering in string representations of abstract states (which could potentially be related to reliability or stability), the actual commit seems to focus on code organization rather than addressing that specific issue directly."
664f63cb7b998c13cdbb740c,a212cec19c9bb32d9bd781e9ac33d75c552fa4a9,bisq,Move Class,Redesign DAO state monitoring to avoid performance degradation,https://github.com/bisq-network/bisq/issues/5779,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/a212cec19c9bb32d9bd781e9ac33d75c552fa4a9,core/src/main/java/bisq/core/trade/protocol/bisq_v1/messages/TradeMailboxMessage.java/29-43,Unrelated to Performance Improvement,Maintenance-related,These changes were made to move packages
664cf662c6ae44388495b465,75a06834f5583a442416bad46ae71f73ae5072c7,nacos,Move Class,Issue with executing shell script /bin/sh^M on Unix/Linux,https://github.com/alibaba/nacos/issues/3370,https://github.com/alibaba/nacos,https://github.com/alibaba/nacos/commit/75a06834f5583a442416bad46ae71f73ae5072c7,common/src/main/java/com/alibaba/nacos/common/http/client/response/JdkHttpClientResponse.java/26-73,Unrelated to Performance Improvement,Maintenance-related,"Moving the class from com.alibaba.nacos.common.http.client to com.alibaba.nacos.common.http.client.request helps to better organize the codebase, making it more modular and scalable."
664f61aa7b998c13cdbb6ddc,d21e5c95d0296b1b53d178f5b344c933eaca92b4,pmd,Move Class,Consolidate packages in each maven module,https://github.com/pmd/pmd/issues/4830,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/d21e5c95d0296b1b53d178f5b344c933eaca92b4,pmd-visualforce/src/main/java/net/sourceforge/pmd/lang/visualforce/ast/ASTContent.java/7-17,Unrelated to Performance Improvement,Maintenance-related,"This commit is primarily focused on package reorganization and renaming, which doesn't directly relate to any of the specified performance optimization categories."
664f63d87b998c13cdbb741f,71c663eb5306a6e7cbd05d55e95f984eaddd95ec,bisq,Move Class,Redesign DAO state monitoring to avoid performance degradation,https://github.com/bisq-network/bisq/issues/5779,https://github.com/bisq-network/bisq,https://github.com/bisq-network/bisq/commit/71c663eb5306a6e7cbd05d55e95f984eaddd95ec,core/src/main/java/bisq/core/trade/bisq_v1/TradeDataValidation.java/56-447,Unrelated to Performance Improvement,Maintenance-related,"he issue mentions performance degradation, the provided commit and code changes are primarily focused on package reorganization."
665150af4eb27c185fe50397,963da3d7ac99b85b7e928177ad0bc0cefc9eba58,besu,Move Class,eth_subscribe not served by execution endpoint,https://github.com/hyperledger/besu/issues/3948,https://github.com/hyperledger/besu,https://github.com/hyperledger/besu/commit/963da3d7ac99b85b7e928177ad0bc0cefc9eba58,consensus/merge/src/main/java/org/hyperledger/besu/consensus/merge/MergeContext.java/75-80,Unrelated to Performance Improvement,Maintenance-related,the described refactoring do not indicate a direct impact on performance optimization. The focus is on addressing the issue with the eth_subscribe endpoint and updating dependencies.
66772a97cd111b750c4cdcdb,8ff6de9dca48b8499cad57f222ab134e13af425d,txtUML,Move Class,Separate model execution,https://github.com/ELTE-Soft/txtUML/issues/255,https://github.com/ELTE-Soft/txtUML,https://github.com/ELTE-Soft/txtUML/commit/8ff6de9dca48b8499cad57f222ab134e13af425d,dev/tests/hu.elte.txtuml.api.model.execution.tests/src/hu/elte/txtuml/api/model/execution/testmodel/erronous/ClassWithOverlappingGuardsFromChoice.java/11-12,Unrelated to Performance Improvement,Maintenance-related,"Moving the class to a new location or consolidating classes into a single model enhances the maintainability and readability of the code. By organizing related tests and models together, the code becomes easier to manage and understand."
664d1f4ec6ae44388495e9bf,d77601b79339e6453368517e17e872d4eac63e59,skywalking,Move Class,[Python] [Bug] sw-rabbitmq TypeError when there are no headers (pre-sw messages),https://github.com/apache/skywalking/issues/8499,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/d77601b79339e6453368517e17e872d4eac63e59,apm-sniffer/apm-agent-core/src/main/java/org/skywalking/apm/agent/core/logging/LogLevel.java/3-8,Unrelated to Performance Improvement,Maintenance-related,refactoring was done to rename modules
664f4cfb7b998c13cdbb4c6b,f3a43863bd7c370a1f292a456eddcd1e9d226738,reactive-streams-jvm,Move Class,OnSubscribe vs return Subscription,https://github.com/reactive-streams/reactive-streams-jvm/issues/43,https://github.com/reactive-streams/reactive-streams-jvm,https://github.com/reactive-streams/reactive-streams-jvm/commit/f3a43863bd7c370a1f292a456eddcd1e9d226738,api/src/main/java/org/reactivestreams/Subscription.java/3-32,Unrelated to Performance Improvement,Maintenance-related,"Adding the int n parameter to the request method in the Subscription interface provides a clear way to signal the amount of demand for data. This refactoring enhances the flexibility and clarity of the interface, making it easier for implementers to understand and use."
66772a6ccd111b750c4cdbcd,83585e73da7d859a3c94966646972916c8cc44b4,txtUML,Move Class,Separate model execution,https://github.com/ELTE-Soft/txtUML/issues/255,https://github.com/ELTE-Soft/txtUML,https://github.com/ELTE-Soft/txtUML/commit/83585e73da7d859a3c94966646972916c8cc44b4,dev/plugins/hu.elte.txtuml.api.model.execution/src/hu/elte/txtuml/api/model/execution/diagnostics/protocol/GlobalSettings.java/3-11,Unrelated to Performance Improvement,Maintenance-related,Moving the class from api.diagnostics to api.model.execution.diagnostics and renaming the project improves the clarity and maintainability of the code.
664f61a17b998c13cdbb6dd0,5f6d357fc36a048d56c578818ccb13872208f71d,pmd,Move Class,Consolidate packages in each maven module,https://github.com/pmd/pmd/issues/4830,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/5f6d357fc36a048d56c578818ccb13872208f71d,pmd-jsp/src/test/java/net/sourceforge/pmd/lang/jsp/LanguageVersionDiscovererTest.java/20-49,Unrelated to Performance Improvement,Test-related,the primary goal here appears to be improving the structure and organization of the test code rather than enhancing runtime performance of the main application.
66517b204eb27c185fe53eb8,0ea2650cfe972f2a0ba2adc63411e644614d45f6,JPlag,Move Class,"End to end testing - ""comparative values""",https://github.com/jplag/JPlag/issues/548,https://github.com/jplag/JPlag,https://github.com/jplag/JPlag/commit/0ea2650cfe972f2a0ba2adc63411e644614d45f6,jplag.endToEndTesting/src/test/java/de/jplag/end_to_end_testing/javaTestCases.java/24-181,Unrelated to Performance Improvement,Test-related,This refactoring enchances the test module
664f61917b998c13cdbb6da7,845154716cd019cac5df45c1c71d15c337f5b7a3,pmd,Move Class,Consolidate packages in each maven module,https://github.com/pmd/pmd/issues/4830,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/845154716cd019cac5df45c1c71d15c337f5b7a3,pmd-test/src/test/java/net/sourceforge/pmd/test/RuleTstTest.java/30-82,Unrelated to Performance Improvement,Test-related,"refactoring focus on consolidating packages within Maven modules, which aims to improve the organization of the codebase. This does not have a direct impact on performance optimization."
664f61957b998c13cdbb6da8,9d5e229704f35eb82994f4672f81409fc52346d9,pmd,Move Class,Consolidate packages in each maven module,https://github.com/pmd/pmd/issues/4830,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/9d5e229704f35eb82994f4672f81409fc52346d9,pmd-core/src/test/java/net/sourceforge/pmd/lang/impl/PmdRunnableTest.java/48-204,Unrelated to Performance Improvement,Test-related,"Moving classes to consolidate packages improves the organization of the codebase, making it easier to navigate and maintain."
665196d14eb27c185fe5630d,2f2f4c44f4fdedf7a6787d1f5549b0070538d826,dataverse,Rename Method,View unpublished data through search API,https://github.com/IQSS/dataverse/issues/6301,https://github.com/IQSS/dataverse,https://github.com/IQSS/dataverse/commit/2f2f4c44f4fdedf7a6787d1f5549b0070538d826,src/main/java/edu/harvard/iq/dataverse/api/Search.java/238-241,Unrelated to Performance Improvement,Fix-related,"This change is more about expanding features and controlling access to data in searches, rather than directly optimizing performance or refactoring code structure."
6653083e5484ec0c9ccdbcb2,f314e7a77888112f6e3f8cbc21adc27cb35b1896,megamek,Rename Method,"[Nightly] Bug: If a bot is assigned to a slot in MM, game perpetually thinks that slot is a bot, even if replaced by a human.",https://github.com/MegaMek/megamek/issues/3786,https://github.com/MegaMek/megamek,https://github.com/MegaMek/megamek/commit/f314e7a77888112f6e3f8cbc21adc27cb35b1896,megamek/src/megamek/common/Player.java/318-320,Unrelated to Performance Improvement,Maintenance-related,This refactoring enhances the code's maintainability by making the method's purpose clearer and possibly aligning with coding standards or design patterns.
665184e74eb27c185fe54c88,13f219eabea1464a145d684abe06792d9bd393e3,MultiThreadDownload,Rename Method,How to resume a download,https://github.com/Aspsine/MultiThreadDownload/issues/34,https://github.com/Aspsine/MultiThreadDownload,https://github.com/Aspsine/MultiThreadDownload/commit/13f219eabea1464a145d684abe06792d9bd393e3,library/src/main/java/com/aspsine/multithreaddownload/db/ThreadInfo.java/40-42,Unrelated to Performance Improvement,Maintenance-related,This refactoring is primarily about maintaining consistent and accurate terminology in the codebase.
667727dccd111b750c4cd549,d39d642e0c7e50cc2b549aa1b44ebfe812f57bea,extension-springcloud,Rename Method,The blackListedServiceInstances in SpringCloudCommandRouter should be reevaluated from time to time,https://github.com/AxonFramework/extension-springcloud/issues/6,https://github.com/AxonFramework/extension-springcloud,https://github.com/AxonFramework/extension-springcloud/commit/d39d642e0c7e50cc2b549aa1b44ebfe812f57bea,springcloud/src/main/java/org/axonframework/extensions/springcloud/commandhandling/mode/SimpleCapabilityDiscoveryMode.java/108-112,Unrelated to Performance Improvement,Maintenance-related,"This refactoring enhances the maintainability and understandability of the code by using a more descriptive and accurate method name. It helps developers better understand the purpose of the method, which can aid in future code maintenance and development."
664f61ac7b998c13cdbb6e4a,1aa6112aaeeea50e5b830bfad31cd94a3a720644,pmd,Rename Method,Consolidate packages in each maven module,https://github.com/pmd/pmd/issues/4830,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/1aa6112aaeeea50e5b830bfad31cd94a3a720644,pmd-velocity/src/main/java/net/sourceforge/pmd/lang/velocity/ast/ASTMulNode.java/42-45,Unrelated to Performance Improvement,Maintenance-related,This refactoring improves code maintainability by using a different encoder type that may be more appropriate or provide additional functionality. 
665303a15484ec0c9ccdb870,f44f0d2d43edccc75cecb073e2e35edd5fae27fa,riptide,Rename Method,Use persistent data structures for request arguments,https://github.com/zalando/riptide/issues/601,https://github.com/zalando/riptide,https://github.com/zalando/riptide/commit/f44f0d2d43edccc75cecb073e2e35edd5fae27fa,riptide-core/src/main/java/org/zalando/riptide/RequestArguments.java/54-54,Unrelated to Performance Improvement,Maintenance-related,This refactoring improves code maintainability by using a different encoder type that may be more appropriate or provide additional functionality. 
664c2b01c6ae44388494b3b5,31471acb69bb5e41d0668cfbf10c3d8e083b1861,java-design-patterns,Rename Method,Use the same JUnit version everywhere,https://github.com/iluwatar/java-design-patterns/issues/1500,https://github.com/iluwatar/java-design-patterns,https://github.com/iluwatar/java-design-patterns/commit/31471acb69bb5e41d0668cfbf10c3d8e083b1861,builder/src/test/java/com/iluwatar/builder/AppTest.java/35-46,Unrelated to Performance Improvement,Maintenance-related,This refactoring improves code maintainability by using a different encoder type that may be more appropriate or provide additional functionality. 
6652e7ef5484ec0c9ccd95ec,65a83c8aacb2987325aee8e05bbbcc831e3ac05f,RxStore,Rename Method,Android + Kotlin build error: Multiple dex files define Lorg/jetbrains/annotations/NotNull,https://github.com/Gridstone/RxStore/issues/28,https://github.com/Gridstone/RxStore,https://github.com/Gridstone/RxStore/commit/65a83c8aacb2987325aee8e05bbbcc831e3ac05f,rxstore/src/main/java/au/com/gridstone/rxstore/ListStore.java/264-266,Unrelated to Performance Improvement,Maintenance-related,This refactoring improves code maintainability by using a different encoder type that may be more appropriate or provide additional functionality. 
665184e24eb27c185fe54c4f,6b7d6a36bce2f741cac0a2d835f1517db1bff079,MultiThreadDownload,Rename Method,How to resume a download,https://github.com/Aspsine/MultiThreadDownload/issues/34,https://github.com/Aspsine/MultiThreadDownload,https://github.com/Aspsine/MultiThreadDownload/commit/6b7d6a36bce2f741cac0a2d835f1517db1bff079,library/src/main/java/com/aspsine/multithreaddownload/architecture/ConnectTask.java/12-12,Unrelated to Performance Improvement,Maintenance-related,this commit appears to be a significant maintenance-related refactoring aimed at improving the overall structure and capabilities of the download system.
665315a55484ec0c9ccdc973,9f3a7013af01f9b6baf86d16b7239b6cc925cc5a,Snapprefs,Rename Method,Question: Would you like an overhauled Saving system?,https://github.com/marzika/Snapprefs/issues/197,https://github.com/marzika/Snapprefs,https://github.com/marzika/Snapprefs/commit/9f3a7013af01f9b6baf86d16b7239b6cc925cc5a,app/src/main/java/com/marz/snapprefs/Saving.java/356-407,Unrelated to Performance Improvement,Maintenance-related,this commit is aim at improving readability and maintainence
664d7259c6ae443884964a22,b3f142d71530027f41f510e7cabed61d1209c326,keycloak,Rename Method,[UX Review] Fine-tuning of Realm roles,https://github.com/keycloak/keycloak/issues/18578,https://github.com/keycloak/keycloak,https://github.com/keycloak/keycloak/commit/b3f142d71530027f41f510e7cabed61d1209c326,integration/spring-security/src/test/java/org/keycloak/adapters/springsecurity/filter/KeycloakAuthenticationProcessingFilterTest.java/176-178,Unrelated to Performance Improvement,Maintenance-related,this commit is aim at improving readability and maintainence
664f2a2c7b998c13cdbb136d,d5f3b43b10147c13fac48d09b6e83f5f32d213ff,robolectric,Rename Method,Robolectric cannot download artifacts - all tests fail,https://github.com/robolectric/robolectric/issues/5456,https://github.com/robolectric/robolectric,https://github.com/robolectric/robolectric/commit/d5f3b43b10147c13fac48d09b6e83f5f32d213ff,src/test/java/com/xtremelabs/robolectric/res/XmlFileLoaderTest.java/80-108,Unrelated to Performance Improvement,Maintenance-related,this commit is aim at improving readability and maintainence
6652bc955484ec0c9ccd6e58,0666b6e493e7d3f0f4dda9960b194081278058ca,transformer,Rename Method,Command line updates: Allow rules to be specified multiple times.,https://github.com/eclipse/transformer/issues/85,https://github.com/eclipse/transformer,https://github.com/eclipse/transformer/commit/0666b6e493e7d3f0f4dda9960b194081278058ca,org.eclipse.transformer.cli/src/test/java/transformer/test/TestTransformerMultiRenames.java/24-27,Unrelated to Performance Improvement,Maintenance-related,refactoring details provided do not indicate any direct link to performance improvements.
665316195484ec0c9ccdca05,fadfdf73c2c3a1dd9ef1ae091b11127238454f03,BetonQuest,Rename Method,Long Waiting time in Conversations,https://github.com/BetonQuest/BetonQuest/issues/1286,https://github.com/BetonQuest/BetonQuest,https://github.com/BetonQuest/BetonQuest/commit/fadfdf73c2c3a1dd9ef1ae091b11127238454f03,src/main/java/pl/betoncraft/betonquest/BetonQuest.java/87-89,Unrelated to Performance Improvement,Maintenance-related,"Renaming the method from condition to conditions improves code readability and clarity, making it easier to understand the method's purpose. This is a maintenance-related change aimed at improving the overall quality and maintainability of the codebase."
6653084b5484ec0c9ccdbcc9,d8d31b65ed4ee563f9090dc198a668e3606e3ede,megamek,Rename Method,"[Nightly] Bug: If a bot is assigned to a slot in MM, game perpetually thinks that slot is a bot, even if replaced by a human.",https://github.com/MegaMek/megamek/issues/3786,https://github.com/MegaMek/megamek,https://github.com/MegaMek/megamek/commit/d8d31b65ed4ee563f9090dc198a668e3606e3ede,megamek/src/megamek/server/GameManager.java/336-340,Unrelated to Performance Improvement,Maintenance-related,This refactorings was done for test case
6653068a5484ec0c9ccdbb73,747728e725394b86309b73c71f633b2d608cbd6e,megamek,Rename Method,[49.16 - J17] Princess Issues with Advanced Ammo Selection (MMLs and LACs at least).,https://github.com/MegaMek/megamek/issues/4952,https://github.com/MegaMek/megamek,https://github.com/MegaMek/megamek/commit/747728e725394b86309b73c71f633b2d608cbd6e,megamek/src/megamek/client/bot/princess/AeroPathUtil.java/259-289,Unrelated to Performance Improvement,Maintenance-related,This refactorings was done for test case
664d3e3cc6ae4438849607c5,f187931e8df54cfb717b8f7edb1e086b0d30d377,skywalking,Rename Method,[Feature] Implement GC for SeriesDatabase of TSDB,https://github.com/apache/skywalking/issues/11494,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/f187931e8df54cfb717b8f7edb1e086b0d30d377,apm-collector/apm-collector-stream/src/main/java/org/skywalking/apm/collector/stream/grpc/StreamGRPCDataListener.java/30-59,Unrelated to Performance Improvement,Maintenance-related,Renaming a method is a maintenance-related change that improves code readability and clarity.
664e81f57b998c13cdba541e,0e32e96c7de77f4dfe43f4899e148515e8d30458,cryptomator,Rename Method,Removing the vault from the vault list while it is still being unlocked does not cancel the unlocking process,https://github.com/cryptomator/cryptomator/issues/1478,https://github.com/cryptomator/cryptomator,https://github.com/cryptomator/cryptomator/commit/0e32e96c7de77f4dfe43f4899e148515e8d30458,main/ui/src/main/java/org/cryptomator/ui/mainwindow/VaultListController.java/167-169,Unrelated to Performance Improvement,Maintenance-related,Renaming methods as part of the refactoring improves code readability and maintainability.
664e63d67b998c13cdba3890,fda4653706c4e88e5ae8eca0842ef60fe2af4cc7,realm-java,Rename Method,Querying for objects with or without relationships,https://github.com/realm/realm-java/issues/975,https://github.com/realm/realm-java,https://github.com/realm/realm-java/commit/fda4653706c4e88e5ae8eca0842ef60fe2af4cc7,realm/src/androidTest/java/io/realm/RealmLinkTests.java/491-501,Unrelated to Performance Improvement,Test-related,"Renaming the method from testIsNotNull to testLinkIsNotNull improves the clarity and specificity of the test method, making it clear that the test is related to checking if a link (relationship) is not null."
6652f4815484ec0c9ccd9e8e,e4aa07ef7fe2cdab0f75417acc488adccdf89b4b,rdf4j,Rename Method,Implement alternative embedded persistent backend,https://github.com/eclipse-rdf4j/rdf4j/issues/3416,https://github.com/eclipse-rdf4j/rdf4j,https://github.com/eclipse-rdf4j/rdf4j/commit/e4aa07ef7fe2cdab0f75417acc488adccdf89b4b,core/sail/lmdb/src/test/java/org/eclipse/rdf4j/sail/lmdb/VarintTest.java/36-49,Unrelated to Performance Improvement,Test-related,Renaming methods as part of this refactoring enhances code clarity and maintainability.
6651701c4eb27c185fe533b5,66555ba35245706291cc839c1b1eee661cb72de6,sonar-cxx,Rename Method,tabcheck should report issue against each line instead of file,https://github.com/SonarOpenCommunity/sonar-cxx/issues/390,https://github.com/SonarOpenCommunity/sonar-cxx,https://github.com/SonarOpenCommunity/sonar-cxx/commit/66555ba35245706291cc839c1b1eee661cb72de6,cxx-checks/src/test/java/org/sonar/cxx/checks/TabCharacterCheckTest.java/52-58,Unrelated to Performance Improvement,Test-related,Renaming methods as part of this refactoring enhances code clarity and maintainability.
6652fba35484ec0c9ccdac46,cb458d5b6addcc97ce47db5c70162c0cd8642b9f,SORMAS-Project,Rename Method,Update the warning messages displayed when a user is not permitted to merge entities [2],https://github.com/SORMAS-Foundation/SORMAS-Project/issues/11517,https://github.com/SORMAS-Foundation/SORMAS-Project,https://github.com/SORMAS-Foundation/SORMAS-Project/commit/cb458d5b6addcc97ce47db5c70162c0cd8642b9f,sormas-backend/src/main/java/de/symeda/sormas/backend/contact/ContactFacadeEjb.java/2097-2150,Unrelated to Performance Improvement,Maintenance-related,"Renaming the method from testIsNotNull to testLinkIsNotNull improves the clarity and specificity of the test method, making it clear that the test is related to checking if a link (relationship) is not null."
6651a8aa4eb27c185fe571a3,dee4d7284924fc4403ca4c9afa348f99daa9e8d0,IPED,Rename Method,Refactor module configuration,https://github.com/sepinf-inc/IPED/issues/538,https://github.com/sepinf-inc/IPED,https://github.com/sepinf-inc/IPED/commit/dee4d7284924fc4403ca4c9afa348f99daa9e8d0,iped-engine/src/main/java/dpf/sp/gpinf/indexer/config/HtmlReportTaskConfig.java/114-179,Unrelated to Performance Improvement,Maintenance-related,"Renaming methods as part of this refactoring helps improve code clarity and consistency. Clear and descriptive method names make the code easier to understand, navigate, and maintain."
6652fab05484ec0c9ccdaaf3,8dff3aab38ad44efa0c3ae051d86df31c2f41d7a,SORMAS-Project,Rename Variable,Bulk action - send emails with uploaded attached documents [5],https://github.com/SORMAS-Foundation/SORMAS-Project/issues/13043,https://github.com/SORMAS-Foundation/SORMAS-Project,https://github.com/SORMAS-Foundation/SORMAS-Project/commit/8dff3aab38ad44efa0c3ae051d86df31c2f41d7a,sormas-ui/src/main/java/de/symeda/sormas/ui/email/ExternalBulkEmailOptionsForm.java/141-141,Unrelated to Performance Improvement,Maintenance-related,"This refactoring enhances maintainability by using a more accurate and descriptive variable name. It helps developers better understand the purpose and scope of the variable, making the code easier to read and manage."
66515a664eb27c185fe51087,e387ed45b8ae4b8dcffa897516b2bafd1124a1e8,cgeo,Rename Variable,NullPointerException in Geopoint.distanceTo,https://github.com/cgeo/cgeo/issues/10071,https://github.com/cgeo/cgeo,https://github.com/cgeo/cgeo/commit/e387ed45b8ae4b8dcffa897516b2bafd1124a1e8,tests/src/cgeo/geocaching/apps/AbstractLocusAppTest.java/32-32,Unrelated to Performance Improvement,Maintenance-related,"This refactoring enhances maintainability by using a more accurate and descriptive variable name. It helps developers better understand the purpose and scope of the variable, making the code easier to read and manage."
664f61ea7b998c13cdbb6e8a,b48da457016e3342151c5987beb10ffa5b73557f,pmd,Rename Variable,[java] StringToString can not detect the case: getStringMethod().toString(),https://github.com/pmd/pmd/issues/2530,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/b48da457016e3342151c5987beb10ffa5b73557f,pmd-java/src/main/java/net/sourceforge/pmd/lang/java/rule/performance/StringToStringRule.java/84-84,Unrelated to Performance Improvement,Maintenance-related,"This refactoring enhances maintainability by using a more accurate and descriptive variable name. It helps developers better understand the purpose and scope of the variable, making the code easier to read and manage."
66773776cd111b750c4cef37,730abe93f6b064e8a9998a9324f3ccdfda869c01,VirtualSatellite4-Core,Rename Variable,Refactor performance tests,https://github.com/virtualsatellite/VirtualSatellite4-Core/issues/1000,https://github.com/virtualsatellite/VirtualSatellite4-Core,https://github.com/virtualsatellite/VirtualSatellite4-Core/commit/730abe93f6b064e8a9998a9324f3ccdfda869c01,de.dlr.sc.virsat.performance.test/src/de/dlr/sc/virsat/performance/PerformanceTest.java/197-197,Unrelated to Performance Improvement,Maintenance-related,"This refactoring enhances maintainability by using a more accurate and descriptive variable name. It helps developers better understand the purpose and scope of the variable, making the code easier to read and manage."
6652a24d4eb27c185fe6bc1a,8d52fd18d7af825ee11c36b4c10c72309d7d911d,magento2-phpstorm-plugin,Rename Variable,Eliminate deprecated Function#getReturnType method usage,https://github.com/magento/magento2-phpstorm-plugin/issues/1035,https://github.com/magento/magento2-phpstorm-plugin,https://github.com/magento/magento2-phpstorm-plugin/commit/8d52fd18d7af825ee11c36b4c10c72309d7d911d,src/com/magento/idea/magento2plugin/actions/generation/util/FillTextBufferWithPluginMethods.java/59-61,Unrelated to Performance Improvement,Maintenance-related,the commit message and code changes focus on renaming a variable and eliminating the usage of a deprecated method.
6652bc845484ec0c9ccd6de7,67c129873cce39a40c8b1e82de5412b0cd5dead2,transformer,Rename Variable,Command line updates: Allow rules to be specified multiple times.,https://github.com/eclipse/transformer/issues/85,https://github.com/eclipse/transformer,https://github.com/eclipse/transformer/commit/67c129873cce39a40c8b1e82de5412b0cd5dead2,org.eclipse.transformer/src/main/java/org/eclipse/transformer/Transformer.java/1040-1040,Unrelated to Performance Improvement,Maintenance-related,the commit message and code changes focus on renaming a variable and eliminating the usage of a deprecated method.
66771f0ccd111b750c4cc7dc,dd7681d4591dacc6552196bf9bf6c9c0719ed4b4,Rails,Rename Variable,"18Scan issue: runTo=""tokenonly"" for an off-map city is not obeyed.",https://github.com/Rails-18xx/Rails/issues/234,https://github.com/Rails-18xx/Rails,https://github.com/Rails-18xx/Rails/commit/dd7681d4591dacc6552196bf9bf6c9c0719ed4b4,src/main/java/net/sf/rails/game/TrainManager.java/104-104,Unrelated to Performance Improvement,Maintenance-related,the commit message and code changes focus on renaming a variable and eliminating the usage of a deprecated method.
6652ad1b4eb27c185fe6bf8d,8b85834ed67f6f084d8440c4ae3f9fb07f530716,stroom,Rename Variable,Local Explorer tree cache is not refreshed when a create/delete occurs on another node,https://github.com/gchq/stroom/issues/3228,https://github.com/gchq/stroom,https://github.com/gchq/stroom/commit/8b85834ed67f6f084d8440c4ae3f9fb07f530716,stroom-explorer/stroom-explorer-impl/src/main/java/stroom/explorer/impl/ExplorerServiceImpl.java/421-425,Unrelated to Performance Improvement,Maintenance-related,the commit message and code changes focus on renaming a variable and eliminating the usage of a deprecated method.
6652e7a05484ec0c9ccd944d,114acb9fd3583077d1c936601aad63f03594e8a2,phabricator-jenkins-plugin,Rename Variable,Plugin isn't compatible with Custom Tools,https://github.com/uber-archive/phabricator-jenkins-plugin/issues/21,https://github.com/uber-archive/phabricator-jenkins-plugin,https://github.com/uber-archive/phabricator-jenkins-plugin/commit/114acb9fd3583077d1c936601aad63f03594e8a2,src/main/java/com/uber/jenkins/phabricator/conduit/Differential.java/49-49,Unrelated to Performance Improvement,Maintenance-related,the described changes focus on refactoring to ensure compatibility with custom tools. There is no indication of performance improvements.
66519a044eb27c185fe5663f,b83a44a20db7cd73c0cd8531eee5a6758f0c661e,dataverse,Rename Variable,Changes to DOI Updating upon Dataset deletion were reverted,https://github.com/IQSS/dataverse/issues/7078,https://github.com/IQSS/dataverse,https://github.com/IQSS/dataverse/commit/b83a44a20db7cd73c0cd8531eee5a6758f0c661e,src/main/java/edu/harvard/iq/dataverse/DOIDataCiteServiceBean.java/233-233,Unrelated to Performance Improvement,Maintenance-related,Renaming a variable to better align with the new PID API improves code readability and maintainability.
6652db535484ec0c9ccd9018,87126988206c430df269177fb6d0b6874abd95ae,elasticsearch-java,Rename Variable,Is there a replacement for the BulkProcessor?,https://github.com/elastic/elasticsearch-java/issues/108,https://github.com/elastic/elasticsearch-java,https://github.com/elastic/elasticsearch-java/commit/87126988206c430df269177fb6d0b6874abd95ae,java-client/src/main/java/co/elastic/clients/util/NamedString.java/47-47,Unrelated to Performance Improvement,Maintenance-related,"Renaming the variable and the utility class from NamedValue to NamedString helps in making the codebase more readable and easier to understand. This refactoring makes it clear that the class is specifically dealing with strings, thereby improving code maintainability. T"
665136d84eb27c185fe4c8c2,a140e18b3d5d8f2c7381af726d35a1d7f20c81cc,eventmesh,Rename Variable,[Enhancement] Method uses immediate execution of a block of code that is often not used [LocalSubscribeEventProcessor],https://github.com/apache/eventmesh/issues/2654,https://github.com/apache/eventmesh,https://github.com/apache/eventmesh/commit/a140e18b3d5d8f2c7381af726d35a1d7f20c81cc,eventmesh-runtime/src/main/java/org/apache/eventmesh/runtime/core/protocol/http/processor/LocalSubscribeEventProcessor.java/73-73,Unrelated to Performance Improvement,Maintenance-related,"Renaming a variable as part of this enhancement helps improve code clarity and readability, ensuring that the purpose of the variable is clear and that the code can be easily understood and maintained."
664e84557b998c13cdba575f,3c136d80484c509d92770eea588ca65460038c2a,Activiti,Add Method Annotation,Fix maven deployAtEnd logic in Activiti modules,https://github.com/Activiti/Activiti/issues/4148,https://github.com/Activiti/Activiti,https://github.com/Activiti/Activiti/commit/3c136d80484c509d92770eea588ca65460038c2a,modules/activiti-engine/src/main/java/org/activiti/engine/impl/bpmn/parser/factory/DefaultListenerFactory.java/85-85,Unrelated to Performance Improvement,Maintenance-related,The addition of the @Override annotation improves code clarity and maintainability by explicitly indicating that the method is intended to override a method in a superclass.
664d2b2ac6ae44388495f158,d2f562f1faea9eef0016953ffb6c77130f37b7ac,skywalking,Add Method Annotation,Topology ui Service SLA show error,https://github.com/apache/skywalking/issues/4273,https://github.com/apache/skywalking,https://github.com/apache/skywalking/commit/d2f562f1faea9eef0016953ffb6c77130f37b7ac,apm-network/src/main/java/org/skywalking/apm/network/trace/component/OfficialComponent.java/15-15,Unrelated to Performance Improvement,Maintenance-related,The addition of the @Override annotation is a maintenance-related change. It improves code clarity and maintainability by explicitly indicating that the method is intended to override a method from a superclass or interface.
66515b294eb27c185fe51194,d083e0fef250e694efb8bfb5085fc127708e3761,jbang,Add Parameter,Extend Catalog system with implicit catalogs,https://github.com/jbangdev/jbang/issues/172,https://github.com/jbangdev/jbang,https://github.com/jbangdev/jbang/commit/d083e0fef250e694efb8bfb5085fc127708e3761,src/main/java/dev/jbang/cli/Alias.java/44-44,Unrelated to Performance Improvement,Maintenance-related,"it represents an important enhancement in functionality and code maintenance. By providing more context in alias listing and cleaning up the code, it improves the system's usability and maintainability. Such improvements, while not directly Fix-related, can lead to a more robust and user-friendly system, which can indirectly contribute to better overall system efficiency and user satisfaction."
664d71a0c6ae44388496496c,2d86b29b6c1e832fc23e09b8c6898450b1228d4f,keycloak,Change Variable Type,Escape character in SAML response,https://github.com/keycloak/keycloak/issues/14529,https://github.com/keycloak/keycloak,https://github.com/keycloak/keycloak/commit/2d86b29b6c1e832fc23e09b8c6898450b1228d4f,integration/undertow/src/main/java/org/keycloak/adapters/undertow/UserSessionManagement.java/161-161,Unrelated to Performance Improvement,Maintenance-related,"this change doesn't fit into a specific performance optimization category, it represents an addition to the system's capability to track and potentially analyze user sessions. Such additions, while not directly impacting performance, can provide valuable insights that might lead to performance improvements or other system enhancements in the future."
665189814eb27c185fe55b06,1d7d3b24900a418bb95e30041a9720a973e3b401,Payara,Change Variable Type,OpenAPI @Schema implementation is ignored /FISH-298,https://github.com/payara/Payara/issues/4802,https://github.com/payara/Payara,https://github.com/payara/Payara/commit/1d7d3b24900a418bb95e30041a9720a973e3b401,appserver/payara-appserver-modules/microprofile/openapi/src/main/java/fish/payara/microprofile/openapi/impl/processor/ApplicationProcessor.java/844-844,Unrelated to Performance Improvement,Maintenance-related,Move class to restructure code
6677224dcd111b750c4ccbcf,4bcb346431ba73c21eb5f8e2f6b8ab310abc9cef,zowe-client-java-sdk,Move Class,Retrieve z/OSMF JSON error report document ,https://github.com/zowe/zowe-client-java-sdk/issues/268,https://github.com/zowe/zowe-client-java-sdk,https://github.com/zowe/zowe-client-java-sdk/commit/4bcb346431ba73c21eb5f8e2f6b8ab310abc9cef,src/main/java/zowe/client/sdk/zostso/response/IssueResponse.java/19-190,Unrelated to Performance Improvement,Maintenance-related,Move class to reorganise Package
664f61827b998c13cdbb6d85,45d2a6935e30b71899e7e4089682f45a34a4bbbf,pmd,Move Class,Consolidate packages in each maven module,https://github.com/pmd/pmd/issues/4830,https://github.com/pmd/pmd,https://github.com/pmd/pmd/commit/45d2a6935e30b71899e7e4089682f45a34a4bbbf,pmd-doc/src/main/java/net/sourceforge/pmd/doc/internal/DeadLinksChecker.java/44-365,Unrelated to Performance Improvement,Maintenance-related,Move class to reorganise Package
66772b8bcd111b750c4ce043,628c4549c4950eacf9f792f99e872e05dd38303e,cruise,Move Class,Use external libraries like Guava or Guice to simplify code,https://github.com/snuspl/cruise/issues/317,https://github.com/snuspl/cruise,https://github.com/snuspl/cruise/commit/628c4549c4950eacf9f792f99e872e05dd38303e,services/ps/src/main/java/edu/snu/cay/services/ps/worker/concurrent/WorkerSideMsgSenderImpl.java/35-110,Unrelated to Performance Improvement,Maintenance-related,Move class to restructure code